{"version":3,"sources":["images/logo-ga.png","components/page_elements/GoldenAgents.tsx","misc/config.tsx","components/page_elements/ListItems.tsx","misc/functions.tsx","components/page_elements/Utils.tsx","components/page_elements/Pages.tsx","components/pages/ResearchPick.tsx","components/pages/dataSetDetail.tsx","renderMachine.tsx","machines/LenseMachine.tsx","components/pages/newProject.tsx","components/pages/editProjectBasics.tsx","serviceWorker.ts","components/pages/EntitySelection.tsx","components/page_elements/PagesDataSelection.tsx","components/pages/PickDataSets.tsx","index.tsx"],"names":["module","exports","HcHeaderGoldenAgents","props","className","src","logoGa","alt","toolName","projectName","HclLIconDataSelection","React","Component","appName","APP_HOME","API_LOCATION","AUTH_SERVER","HcLlSelectEntityFromList","formData","entity_type_selections","jobData","job_description","job_id","job_link","job_title","lens_specs","linkset_specs","data","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","result","sj","type","value","setJob","switchState","console","log","onClick","dataSet","dataset","collection_id","dataset_id","published","timbuctoo_graphql","timbuctoo_hsid","id","label","description","filter","conditions","property","limit","properties","random","related","related_array","length","setIndex","title","push","sendJob","HcLlListItemMinimal2Fields","klasse","fields","key","parentCallback","field1","field2","HcLlListLabel","HcLlListItemDataSelection","job","update_data","struc","reload","index","setBufferIndex","parentCallBack","loadPage","idsList","dsIndex","dsName","dsDataset","dsProvider","alert","currentDataSet","parse","duplicate","splice","remove","HcResultListPaging","HcLlSubNavigation","pageTitle","href","isDs","isAl","HcModal","modalName","children","HcLlLayoutHome","projectID","qsJobID","useState","error","setError","url","setValue","name","form","document","createElement","action","innerHTML","window","location","style","display","appendChild","submit","doLogin","onChange","e","currentTarget","defaultValue","getProject","HcLlLayoutProjectDetail","nw","jobID","newJob","handleChange","sendData","sendNew","sendUpdate","updateValues","undefined","HcLlLayoutDataSelectionOverview","refresh","setRefresh","Fragment","pageData","pageNavAl","pageNavDs","dsList","map","item","HcLlDataSelectionDetail","tab","setTab","rows","collection","ResearchPick","qsID","DataSetDetail","pd","isFunctionComponent","val","lenseMachine","Machine","initial","context","created_at","updated_at","bufferedIndex","on","research","entity","create","datasets","dataset_detail","states","idle","NEW","FETCH","SET_ID","actions","assign","event","SET_JOB","ENTITY","RESEARCH","target","DATASETS","DATASET_DETAIL","SET_INDEX","NewProject","EditProjectBasics","loading","setLoading","useEffect","Boolean","hostname","match","EntitySelection","introductionText","jd","retList","buffer","createList","HcLlSelectDataset","datasetList","detailInfoName","detailInfoProvider","detailInfodescription","detailInfoEntities","field","PickDataSets","refreshToggle","setRefreshToggle","options","hsid","authorization","setPageData","dataSets","setDataSets","obj","Object","keys","g","toString","setDataSetList","setDetailInfoEntities","list","collections","fetchDataSets","interpreter","interpret","start","screens","send","setContextValue","setContextJob","setContextIndex","qs","URLSearchParams","search","get","qsHSID","ReactDOM","render","state","curState","setState","cb","onTransition","off","view","pickReactComponents","config","configVal","getFirstReactComponent","singleResult","count","subResult","merger","input","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,+QCKpC,SAASC,EAAqBC,GAC7B,OACI,yBAAKC,UAAU,4CACX,yBAAKA,UAAU,kBACX,yBACIC,IAAKC,IACLC,IAAI,wBAEZ,yBAAKH,UAAU,sBACVD,EAAMK,UAEX,yBAAKJ,UAAU,qBACVD,EAAMM,aAEX,yBAAKL,UAAU,oBAQxB,IAAMM,EAAb,uKAEQ,OACI,yBAAKN,UAAU,kDAH3B,GAA2CO,IAAMC,W,GAUVD,IAAMC,U,8BCrChCC,EAAU,oBAEVC,EAAW,oCAEXC,EAAe,8BAGfC,EAAc,6CCmBpB,SAASC,EAAyBd,GACrC,IAAIe,EAAiB,CACjBC,uBAAwBhB,EAAMiB,QAAQD,uBACtCE,gBAAiBlB,EAAMiB,QAAQC,gBAC/BC,OAAQnB,EAAMiB,QAAQE,OACtBC,SAAUpB,EAAMiB,QAAQG,SACxBC,UAAWrB,EAAMiB,QAAQI,UACzBC,WAAYtB,EAAMiB,QAAQK,WAC1BC,cAAevB,EAAMiB,QAAQM,eAR8G,4CAW/I,WAAuBC,GAAvB,qBAAAC,EAAA,6DACUC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUhB,IAJ7B,SAM2BiB,MAAMpB,EAAe,cAAec,GAN/D,cAMUO,EANV,gBAO4BA,EAASC,OAPrC,OASwB,aAFdA,EAPV,QASaC,QACCC,EAAc,CAChBC,KAAM,UACNC,MAAOvB,GAEXf,EAAMuC,OAAOH,GACbpC,EAAMwC,YAAY,WAElBC,QAAQC,IAAIR,GAjBpB,4CAX+I,sBAgC/I,OACI,yBAAKjC,UAAU,eAAe0C,QAAS,WACnC,IAAMC,ECxDU,CACpBC,QAAS,CACLC,cAAe,GACfC,WAAY,GACZC,UAAW,KACXC,kBAAmBpC,EACnBqC,eAAgB,MAEpBC,IAAK,EACLC,MAAO,qBACPC,YAAa,cACbC,OAAQ,CACJC,WAAY,CAAC,CACTC,SAAU,KAEdnB,KAAM,OAEVoB,OAAQ,EACRC,WAAY,GACZC,QAAQ,EACRC,QAAS,GACTC,eAAe,GDoCXjB,EAAQO,GAAKpC,EAASC,uBAAuB8C,OAC7ClB,EAAQC,QAAQE,WAAa/C,EAAM+D,SACnCnB,EAAQC,QAAQC,cAAgB9C,EAAMgE,MACtCjD,EAASC,uBAAuBiD,KAAKrB,GAtCkG,oCAwCvIsB,CAAQnD,KAEPf,EAAMgE,OAQZ,SAASG,EAA2BnE,GACvC,IACIoE,EAAiB,GAQrB,OANIA,EAHoBpE,EAAMqE,OAAOC,KAAOtE,EAAM+D,SAGrC,iCAEA,2BAKT,yBAAK9D,UAAWmE,EAAQzB,QAAS,kBAAM3C,EAAMuE,eAAevE,EAAMqE,OAAOC,OACrE,6BACKtE,EAAMqE,OAAOG,OACd,yBAAKvE,UAAU,4BACVD,EAAMqE,OAAOI,UAU3B,SAASC,EAAc1E,GAE1B,OACI,yBAAKC,UAAU,WACVD,EAAMgE,OAQZ,SAASW,EAA0B3E,GAA4J,SAenLkE,EAfmL,8EAelM,WAAuBU,GAAvB,mBAAAnD,EAAA,6DACUC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU6C,IAJ7B,SAM2B5C,MAAMpB,EAAe,cAAec,GAN/D,cAMUO,EANV,gBAO4BA,EAASC,OAPrC,OASwB,aAFdA,EAPV,QASaC,OACL0C,EAAYD,GAEZnC,QAAQC,IAAIR,GAZpB,4CAfkM,sBA+BlM,SAAS2C,EAAYD,GACjB,IAAME,EAAgB,CAClBzC,KAAM,UACNC,MAAOsC,GAEX5E,EAAMuC,OAAOuC,GACb9E,EAAM+E,SAaV,OACI,yBAAK9E,UAAU,qBACX,yBAAKA,UAAU,iBAAiB0C,QAAS,YAZjD,SAAkBqC,GACd,IAAMF,EAAyB,CAC3BzC,KAAM,YACNC,MAAO0C,GAEXhF,EAAMiF,eAAeH,GACrB9E,EAAMkF,eAAe,kBAM+BC,CAASnF,EAAMoF,QAAQC,WACnE,gCAAQ,kBAAC,EAAD,MAAR,IAAkCrF,EAAMoF,QAAQE,QAChD,yBAAKrF,UAAU,cACVD,EAAMoF,QAAQG,WAEnB,yBAAKtF,UAAU,cACVD,EAAMoF,QAAQI,aAGvB,yBAAKvF,UAAU,mBAAmB0C,QAAS,WAAO8C,MAAM,2BAAxD,eACA,yBAAKxF,UAAU,mBAAmB0C,QAAS,YA7DnD,SAAmBqC,GACf,IAAIJ,EAAM5E,EAAMiB,QAEZyE,EADW5D,KAAK6D,MAAM7D,KAAKC,UAAU6C,EAAI5D,yBACJgE,GACzCJ,EAAI5D,uBAAuBiD,KAAKyB,GAChCxB,EAAQU,GAwD8CgB,CAAU5F,EAAMoF,QAAQC,WAA1E,aACA,yBAAKpF,UAAU,mBAAmB0C,QAAS,YAtDnD,SAAgBqC,GACZ,IAAIJ,EAAM5E,EAAMiB,QAChB2D,EAAI5D,uBAAuB6E,OAAOb,EAAO,GACzCd,EAAQU,GAmD8CkB,CAAO9F,EAAMoF,QAAQC,WAAvE,WAsGL,SAASU,IAEZ,OACI,yBAAK9F,UAAU,iBEtRhB,SAAS+F,EAAkBhG,GAC9B,OACI,yBAAKC,UAAU,sCACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,qBACX,4BAAKD,EAAMiG,YAEf,yBAAKhG,UAAU,oDACX,uBAAGiG,KAAK,GAAGjG,UAAYD,EAAMmG,KAAO,aAAe,IAAnD,kBACA,uBAAGD,KAAK,GAAGjG,UAAYD,EAAMoG,KAAO,aAAe,IAAnD,gBAQb,SAASC,EAAQrG,GACpB,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,sBAEX,yBAAKA,UAAU,6DACX,4BAAKD,EAAMsG,WACX,yBAAKrG,UAAU,sBAAsB0C,QAAS,kBAAM3C,EAAMkF,eAAe,YAAzE,UAEHlF,EAAMuG,YCGpB,SAASC,EAAexG,GAC3B,IAAIyG,EAAoBzG,EAAM0G,QADyI,EAE7IC,mBAAS,IAFoI,mBAEhKC,EAFgK,KAEzJC,EAFyJ,iDA2BvK,kCAAApF,EAAA,6DACUqF,EAAMlG,EAAe,OAAS6F,EADxC,kBAG+BzE,MAAM8E,GAHrC,cAGc7E,EAHd,gBAIiCA,EAASC,OAJ1C,OAIcA,EAJd,OAKc4C,EAAmB,CAACzC,KAAM,SAAUC,MAAOJ,EAAKf,QACtDnB,EAAM+G,SAASjC,GACf9E,EAAMkF,eAAe,SAP7B,kDASQ2B,EAAS,mDATjB,2DA3BuK,sBAwCvK,OAAQ,yBAAK5G,UAAU,mDACnB,yBAAKA,UAAU,cAGX,yBAAKA,UAAU,qCACX,4CADJ,0DAKI,6BACA,6BACA,4BAAQoC,KAAK,SAAS2E,KAAK,SAASrE,QAAS,kBAAM3C,EAAMkF,eAAe,SAAxE,gBAGA,yBAAKjF,UAAU,eACX,qCADJ,2CAGI,4BAAQoC,KAAK,SAAS2E,KAAK,cAAc/G,UAAU,WAAW0C,QAAS,YAxCvF,WACI,IAAMsE,EAAOC,SAASC,cAAc,QACpCF,EAAKG,OAASvG,EACdoG,EAAKtF,OAAS,OACdsF,EAAKI,UAAL,oCAA8CC,OAAOC,SAArD,qBACAN,EAAKO,MAAMC,QAAU,OACrBP,SAASrF,KAAK6F,YAAYT,GAC1BA,EAAKU,SAiCqFC,KAA9E,WAOR,yBAAK3H,UAAU,qCACX,iDACA,qCAIA,yBAAKA,UAAU,kCACX,uBAAGA,UAAU,mBAAb,2BAGA,2BAAOoC,KAAK,OAAO2E,KAAK,YAAYa,SArEpD,SAAsBC,GAClBrB,EAAYqB,EAAEC,cAAczF,OAoE4CrC,UAAU,kBAAkB+H,aAAchI,EAAM0G,UAC5G,4BAAQrE,KAAK,SAAS2E,KAAK,SAASrE,QAlEpD,WACsB,KAAd8D,EACAI,EAAS,yBAXsJ,mCAa/JoB,KA8DQ,mBAKR,yBAAKhI,UAAU,YAAY2G,KAMhC,SAASsB,EAAwBlI,GACpC,IAAIe,EAAsB,CACtBM,UAAWrB,EAAMiB,QAAQI,UACzBH,gBAAiBlB,EAAMiB,QAAQC,gBAC/BE,SAAUpB,EAAMiB,QAAQG,UAGxB+G,GAAc,EAEE,KAAhBnI,EAAMoI,QACND,GAAK,GAVgJ,MAa7HxB,mBAAkBwB,GAb2G,mBAalJE,EAbkJ,UAezJ,SAASC,EAAaR,GAClB,OAAQA,EAAEC,cAAcf,MACpB,IAAK,YACDjG,EAASM,UAAYyG,EAAEC,cAAczF,MACrC,MACJ,IAAK,WACDvB,EAASK,SAAW0G,EAAEC,cAAczF,OAShD,SAASiG,IACDF,EA/BiJ,mCAgCjJG,GAhCiJ,mCAkCjJC,GAlCiJ,4CAsCzJ,gCAAAhH,EAAA,6DACUC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUhB,IAJ7B,SAM2BiB,MAAMpB,EAAe,cAAec,GAN/D,cAMUO,EANV,gBAOuBA,EAASC,OAPhC,OAOUV,EAPV,OAQIiB,QAAQC,IAAIlB,GACQ,YAAhBA,EAAKW,QACLnC,EAAM+G,SAAS,CAAC1E,KAAM,SAAUC,MAAOd,EAAKL,SAEhDmG,OAAOC,SAASrB,KAAOvF,EAAW,WAAaa,EAAKL,OAZxD,6CAtCyJ,kEAsDzJ,kCAAAM,EAAA,6DACQiH,EAA2B,CAC3BvH,OAAQnB,EAAMiB,QAAQE,OACtBE,UAAWN,EAASM,UACpBH,gBAAiBH,EAASG,gBAC1BE,SAAUL,EAASK,UAKsB,OAAzCpB,EAAMiB,QAAQD,yBACd0H,EAAa1H,uBAAyBhB,EAAMiB,QAAQD,wBAGvB,OAA7BhB,EAAMiB,QAAQK,aACdoH,EAAapH,WAAatB,EAAMiB,QAAQK,YAGR,OAAhCtB,EAAMiB,QAAQM,gBACdmH,EAAanH,cAAgBvB,EAAMiB,QAAQM,eAGzCG,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU2G,IAzB7B,SA2B2B1G,MAAMpB,EAAe,aAAcc,GA3B9D,cA2BUO,EA3BV,OA4BIQ,QAAQC,IAAIT,GA5BhB,UA6BuBA,EAASC,OA7BhC,aA8BwByG,KADdnH,EA7BV,QA8BaW,QAAwC,YAAhBX,EAAKW,QAClCnC,EAAM+G,SAAS,CAAC1E,KAAM,SAAUC,MAAOd,EAAKL,SA/BpD,6CAtDyJ,sBA2FzJ,OAAQ,yBAAKlB,UAAU,mDACnB,0BAAMA,UAAU,cAGZ,yBAAKA,UAAU,4CACX,6CACA,2BAAOoC,KAAK,OAAO2E,KAAK,YAAYgB,aAAcjH,EAASM,UAAWwG,SAAUS,EACzErI,UAAU,oBAEjB,oDACA,8BAAUA,UAAU,kBAAkB+G,KAAK,kBACjCgB,aAAcjH,EAASG,gBAAiB2G,SA5E9D,SAA0BC,GACtB/G,EAASG,gBAAkB4G,EAAEC,cAAczF,SA+EnC,6CACA,2BAAOD,KAAK,OAAO2E,KAAK,WAAWgB,aAAcjH,EAASK,SAAUyG,SAAUS,EACvErI,UAAU,oBACjB,4BAAQoC,KAAK,SAASM,QAAS,kBAAM3C,EAAMkF,eAAe,cAA1D,QACA,4BAAQ7C,KAAK,SAASM,QAAS,kBAAM4F,MAArC,iBACEF,EAEG,8BADD,4BAAQhG,KAAK,SAASM,QAAS,kBAAM3C,EAAMkF,eAAe,YAA1D,SAKR,yBAAKjF,UAAU,wCAOpB,SAAS2I,EAAgC5I,GAAoJ,IAAD,EACjK2G,oBAAS,GADwJ,mBACxLkC,EADwL,KAC/KC,EAD+K,KAGzL/D,EAA0B,WAC5B+D,GAAYD,IAGhB,OAAQ,kBAAC,IAAME,SAAP,KACJ,kBAAC/C,EAAD,CAAmBC,UAAWjG,EAAMgJ,SAAS/C,UAAWG,KAAMpG,EAAMgJ,SAASC,UAC1D9C,KAAMnG,EAAMgJ,SAASE,YAExC,yBAAKjJ,UAAU,sCACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,qBAAf,6EAEI,6BAFJ,8CAIA,yBAAKA,UAAU,qBACX,4BAAQoC,KAAK,SAAS2E,KAAK,SAASrE,QAAS,kBAAM3C,EAAMkF,eAAe,cAAxE,yBAOZ,yBAAKjF,UAAU,sCACX,yBAAKA,UAAU,qDACX,6BAEI,kBAACyE,EAAD,CAAeV,MAAM,sBAY7B,yBAAK/D,UAAU,iEAEVD,EAAMgJ,SAASG,OAAOC,KAAI,SAAAC,GAAI,OAC3B,kBAAC1E,EAAD,CAA2BO,eAAgBlF,EAAMkF,eAAgBE,QAASiE,EAAMpI,QAASjB,EAAMiB,QAASsB,OAAQvC,EAAMuC,OAAQwC,OAAQA,EAAQE,eAAgBjF,EAAMiF,qBAG5K,kBAACc,EAAD,QAML,SAASuD,EAAwBtJ,GAAiI,IAAD,EAC9I2G,mBAAS,QADqI,mBAC7J4C,EAD6J,KACxJC,EADwJ,KAE9JzI,EAA+B,CACjCqC,MAAOpD,EAAMgJ,SAAS/C,UACtB5C,YAAarD,EAAMgJ,SAAS3F,aAOhC,SAASsE,IACL,IAAI/C,EAAM5E,EAAMiB,QAChB2D,EAAI5D,uBAAuBhB,EAAMqF,SAASjC,MAAQrC,EAASqC,MAC3DwB,EAAI5D,uBAAuBhB,EAAMqF,SAAShC,YAActC,EAASsC,YAd+F,oCAehKa,CAAQU,GAfwJ,4CAkBpK,WAAuBA,GAAvB,mBAAAnD,EAAA,6DACUC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU6C,IAJ7B,SAM2B5C,MAAMpB,EAAe,cAAec,GAN/D,cAMUO,EANV,gBAO4BA,EAASC,OAPrC,OASwB,aAFdA,EAPV,QASaC,OACL0C,EAAYD,GAEZnC,QAAQC,IAAIR,GAZpB,4CAlBoK,sBAkCpK,SAAS2C,EAAYD,GACjB,IAAME,EAAiB,CACnBzC,KAAM,UACNC,MAAOsC,GAEX5E,EAAMuC,OAAOuC,GACb9E,EAAMkF,eAAe,UAezB,OAAQ,kBAAC,IAAM6D,SAAP,KACA,kBAAC/C,EAAD,CAAmBC,UAAWjG,EAAMgJ,SAAS/C,UAAWG,KAAMpG,EAAMgJ,SAASC,UAC1D9C,KAAMnG,EAAMgJ,SAASE,YAUxC,yBAAKjJ,UAAU,sCACX,yBAAKA,UAAU,wCACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,iCAAiCkD,GAAG,gBAAgBR,QAAS,kBAAM6G,EAAO,UAAzF,QACA,yBAAKvJ,UAAU,iCAAiCkD,GAAG,mBAAmBR,QAAS,kBAAM6G,EAAO,SAA5F,WACA,yBAAKvJ,UAAU,iCAAiCkD,GAAG,kBAAkBR,QAAS,kBAAM6G,EAAO,YAA3F,UACA,yBAAKvJ,UAAU,iCAAiCkD,GAAG,kBAAkBR,QAAS,kBAAM6G,EAAO,YAA3F,UACA,yBAAKvJ,UAAU,iCAAiCkD,GAAG,oBAAoBR,QAAS,kBAAM6G,EAAO,cAA7F,aAEJ,yBAAKvJ,UAAU,0DAGF,SAARsJ,EACD,yBAAKtJ,UAAU,mCAAmCkD,GAAG,oBACjD,qCACA,2BAAOd,KAAK,OAAO2E,KAAK,QAAQgB,aAAchI,EAAMgJ,SAAS/C,UAAWhG,UAAU,kBAAmB4H,SAvC7H,SAAsBC,GAClB,OAAQA,EAAEC,cAAcf,MACpB,IAAK,QACDjG,EAASqC,MAAO0E,EAAEC,cAAczF,UAqCpB,2CACA,8BAAU0E,KAAK,cAAcyC,KAAM,EAAGzB,aAAchI,EAAMgJ,SAAS3F,YAAapD,UAAU,kBAAmB4H,SAjCrI,SAA0BC,GACtB/G,EAASsC,YAAcyE,EAAEC,cAAczF,SAgCuH,6BAC1I,4BAAQD,KAAK,SAAS2E,KAAK,SAASrE,QAAS,kBAAMgF,MAAnD,iBAGA,4BAAQtF,KAAK,SAAS2E,KAAK,OAAOrE,QAAS,WAAO3C,EAAMkF,eAAe,YAAvE,SAGO,8BAGF,QAARqE,EACD,yBAAKtJ,UAAU,4BAA4BkD,GAAG,uBAC1C,kDACA,6BACI,yBAAKlD,UAAU,8BACX,6BACI,yBAAKA,UAAU,WAAf,WACCD,EAAMgJ,SAASnG,SAMpB,6BACI,yBAAK5C,UAAU,WAAf,UACCD,EAAMgJ,SAASU,aAGxB,4BAAQrH,KAAK,SAAS2E,KAAK,UAA3B,iBAKG,8BAIF,WAARuC,EACD,yBAAKtJ,UAAU,mCAAmCkD,GAAG,sBACjD,uCAGO,8BAIF,WAARoG,EACD,yBAAKtJ,UAAU,4BAA4BkD,GAAG,sBAC1C,sCACA,yBAAKlD,UAAU,cACX,6FACA,6BAAK,2BAAOoC,KAAK,SAASC,MAAM,UAE7B,8BAIF,aAARiH,EACD,yBAAKtJ,UAAU,4BAA4BkD,GAAG,wBAC1C,yCACO,kCChbpB,SAASwG,EAAa3J,GACjC,IAKQ4J,EAAO,GAIf,OAH0B,OAAlB5J,EAAM0G,UACNkD,EAAO5J,EAAM0G,SAGjB,yBAAKzG,UAAU,OACX,kBAACF,EAAD,CAAsBM,SAAUK,EACVJ,YAAY,oBAClC,kBAACkG,EAAD,CAAgBwC,SAZpB,CACI,UAAa,OACb,YAAe,IAUqB9D,eAAgBlF,EAAMkF,eAAgB6B,SAAU/G,EAAM+G,SAAUxE,OAAQvC,EAAMuC,OAAQ6F,MAAOpI,EAAMoI,MAAO1B,QAASkD,KCf5J,SAASC,EAAc7J,GAC1B,IAAM8J,EAA+B,CACjC,UAAa9J,EAAMiB,QAAQD,uBAAuBhB,EAAMqF,SAASjC,MACjE,YAAepD,EAAMiB,QAAQD,uBAAuBhB,EAAMqF,SAAShC,YACnE,QAAWrD,EAAMiB,QAAQD,uBAAuBhB,EAAMqF,SAASxC,QAAQE,WACvE,WAAc/C,EAAMiB,QAAQD,uBAAuBhB,EAAMqF,SAASxC,QAAQC,cAC1E,WAAa,EACb,WAAa,EACb,QAAW,CACP,CACI,SAAW,EACX,cAAiB,KACjB,WAAc,CACV,CAAC,SAAY,CAAC,cAAc,iBAAiB,8BAA8B,gCAAgC,cAE/G,UAAY,aAEhB,CACI,SAAW,EACX,cAAiB,KACjB,WAAc,CACV,CAAC,SAAY,CAAC,cAAc,iBAAiB,8BAA8B,gCAAgC,cAE/G,UAAY,eAKxB,OACI,yBAAK7C,UAAU,OACf,kBAACF,EAAD,CAAsBM,SAAUK,EAASJ,YAAaN,EAAMiB,QAAQI,YACxE,kBAACiI,EAAD,CAAyBN,SAAUc,EAAI5E,eAAgBlF,EAAMkF,eAAgBjE,QAASjB,EAAMiB,QAASsB,OAAQvC,EAAMuC,OAAQ8C,QAASrF,EAAMqF,WCM9I,SAAS0E,EAA0DC,GACjE,MAAsB,oBAARA,E,mBCzCHC,EAAeC,YAczB,CACC/G,GAAI,iBACJgH,QAAS,WACTC,QAAS,CACLnJ,QAAS,CACLoJ,WAAY,GACZrJ,uBAAwB,GACxBE,gBAAiB,GACjBC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,cAAe,GACf+I,WAAY,IAEhBlC,MAAO,GACPmC,cAAe,GAEnBC,GAAI,CACAC,SAAU,WACVC,OAAQ,SACRC,OAAQ,SACR3I,MAAO,QACP4I,SAAU,WACVC,eAAgB,kBAEpBC,OAAQ,CACJC,KAAM,GACNN,SAAU,CACND,GAAI,CACAQ,IAAK,SACLC,MAAO,QACPC,OAAQ,CACJC,QAASC,YAAO,CAAChD,MAAO,SAACgC,EAASiB,GAAV,OAA+BA,EAAM/I,UAEjEgJ,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,YAIzEqI,OAAQ,CACJH,GAAI,CACAe,OAAQ,SACRC,SAAU,WACVN,OAAQ,CACJC,QAASC,YAAO,CAAChD,MAAO,SAACgC,EAASiB,GAAV,OAA+BA,EAAM/I,SAC7DmJ,OAAQ,SAEZH,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,YAIzEN,MAAO,CACHwI,GAAI,CACAe,OAAQ,SACRN,MAAO,QACPO,SAAU,WACVN,OAAQ,CACJC,QAASC,YAAO,CAAChD,MAAO,SAACgC,EAASiB,GAAV,OAA+BA,EAAM/I,SAC7DmJ,OAAQ,SAEZH,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,YAIzEoI,OAAQ,CACJF,GAAI,CACAkB,SAAU,WACVC,eAAgB,iBAChBL,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,UAEjEsJ,UAAW,CACPT,QAASC,YAAO,CAACb,cAAe,SAACH,EAASiB,GAAV,OAAqCA,EAAM/I,YAIvFsI,SAAU,CACNJ,GAAI,CACAe,OAAQ,SACRD,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,UAEjEsJ,UAAW,CACPT,QAASC,YAAO,CAACb,cAAe,SAACH,EAASiB,GAAV,OAAqCA,EAAM/I,YAIvFuI,eAAgB,CACZL,GAAI,CACAe,OAAQ,SACRD,QAAS,CACLH,QAASC,YAAO,CAACnK,QAAS,SAACmJ,EAASiB,GAAV,OAA6BA,EAAM/I,eCzG1E,SAASuJ,EAAW7L,GACvB,OACI,yBAAKC,UAAU,OACX,kBAACF,EAAD,CAAsBM,SAAUK,EACVJ,YAAY,iBAClC,kBAAC4H,EAAD,CAAyBhD,eAAgBlF,EAAMkF,eAAgB6B,SAAU/G,EAAM+G,SAAUxE,OAAQvC,EAAMuC,OAAQ6F,MAAOpI,EAAMoI,MAAOnH,QAASjB,EAAMiB,WCJvJ,SAAS6K,EAAkB9L,GAAkH,IAAD,EACjH2G,oBAAS,GADwG,mBACxIoF,EADwI,KAC/HC,EAD+H,OAEzHrF,mBAAe3G,EAAMiB,SAFoG,mBAExI2D,EAFwI,KAEnIrC,EAFmI,iDAI/I,kCAAAd,EAAA,6DACUqF,EAAMlG,EAAe,OAASZ,EAAMoI,MAD9C,SAE2BpG,MAAM8E,GAFjC,cAEU7E,EAFV,gBAG6BA,EAASC,OAHtC,OAGUA,EAHV,OAIU4C,EAAiB,CAACzC,KAAM,UAAWC,MAAOJ,GAChDlC,EAAMuC,OAAOuC,GACbvC,EAAOL,GACP8J,GAAW,GAPf,6CAJ+I,sBAkB/I,OAJAC,qBAAU,YAdqI,mCAe3IhE,KACD,CAAC8D,IAGA,yBAAK9L,UAAU,OACV8L,EACG,kBAAChM,EAAD,CAAsBM,SAAUK,EACVJ,YAAY,eAElC,6BACA,kBAACP,EAAD,CAAsBM,SAAUK,EAASJ,YAAasE,EAAIvD,YAC1D,kBAAC6G,EAAD,CAAyBhD,eAAgBlF,EAAMkF,eAAgB6B,SAAU/G,EAAM+G,SAAUxE,OAAQvC,EAAMuC,OAAQ6F,MAAOpI,EAAMoI,MAAOnH,QAASjB,EAAMiB,Y,YCtB9IiL,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASC,MACvB,2DCJC,SAASC,EAAgBrM,GAC5B,IAAM8J,EAA6B,CAC/B7D,UAAW,wBACXiD,WAAW,EACXD,WAAW,EACXqD,iBAAkB,wHAClBnD,OAGJ,SAAoBoD,GAChB,IAAIC,EAAqB,GACS,OAA9BD,EAAGvL,wBACHuL,EAAGvL,uBAAuBoI,KAAI,SAACC,EAAMrE,GACjC,IAAMyH,EAAkB,CACpBnH,OAAQ+D,EAAKjG,MACbmC,UAAW8D,EAAKhG,YAChBmC,WAAY,GACZH,QAASL,GAEbwH,EAAQvI,KAAKwI,MAGrB,OAAOD,EAhBCE,CAAW1M,EAAMiB,UAmB7B,OACI,yBAAKhB,UAAU,OACX,kBAACF,EAAD,CAAsBM,SAAUK,EAASJ,YAAaN,EAAMiB,QAAQI,YACpE,kBAACuH,EAAD,CAAiC1D,eAAgBlF,EAAMkF,eAAgB8D,SAAUc,EAAI7I,QAASjB,EAAMiB,QACnEsB,OAAQvC,EAAMuC,OAAQ0C,eAAgBjF,EAAMiF,kBCkHlF,SAAS0H,EAAkB3M,GAE9B,OACI,kBAAC,IAAM+I,SAAP,KACI,yBAAK9I,UAAU,eACX,yBAAKA,UAAU,sDACVD,EAAMgJ,SAAS4D,YAAYxD,KAAI,SAAAC,GAAI,OAChC,kBAAClF,EAAD,CAA4BE,OAAQgF,EAAMtF,SAAU/D,EAAMgJ,SAASjF,SAAUQ,eAAiBvE,EAAMuE,qBAG5G,yBAAKtE,UAAU,+CACX,yBAAKA,UAAU,gBACX,gCACKD,EAAMgJ,SAAS6D,iBAGxB,yBAAK5M,UAAU,4BACVD,EAAMgJ,SAAS8D,oBAEpB,yBAAK7M,UAAU,4CACVD,EAAMgJ,SAAS+D,uBAEpB,yBAAK9M,UAAU,WAAf,UACA,yBAAKA,UAAU,WACVD,EAAMgJ,SAASgE,mBAAmB5D,KAAI,SAAAC,GAAI,OACvC,kBAACvI,EAAD,CAA0BkD,MAAOqF,EAAK4D,MAAOlJ,SAAU/D,EAAMgJ,SAASjF,SAAU9C,QAASjB,EAAMiB,QAASuB,YAAaxC,EAAMwC,YAAaD,OAAQvC,EAAMuC,gBCnK3K,SAAS2K,EAAalN,GAAkG,IAAD,EAC5F2G,oBAAS,GADmF,mBACnHoF,EADmH,KAC1GC,EAD0G,OAEhFrF,oBAAS,GAFuE,mBAEnHwG,EAFmH,KAEpGC,EAFoG,KAGpHtG,EAAMlG,EdhBwB,mEciBhCyM,EAAe,GACA,OAAfrN,EAAMsN,OACND,EAAU,CACNzL,QAAS,CACL2L,cAAevN,EAAMsN,QAKjC,IAAIxD,EAA8B,CAC9B7D,UAAW,uBACXiD,WAAW,EACXD,WAAW,EACX2D,YAAa,GACbI,mBAAoB,GACpBH,eAAgB,GAChBC,mBAAoB,GACpBC,sBAAuB,GACvBhJ,SAAU,IAtB4G,EAyB1F4C,mBAAkCmD,GAzBwD,mBAyBnHd,EAzBmH,KAyBzGwE,EAzByG,OA0B1F7G,qBA1B0F,mBA0BnH8G,EA1BmH,KA0BzGC,EA1ByG,iDA4B1H,kCAAAjM,EAAA,6DACIgB,QAAQC,IAAIoE,GADhB,SAE2B9E,MAAM8E,EAAKuG,GAFtC,cAEUpL,EAFV,gBAGuBA,EAASC,OAHhC,OAGUA,EAHV,OAIUyL,EAAMC,OAAOC,KAAK3L,GAClB4L,EAAYH,EAAI,GAAGI,WACzBjE,EAAG/F,SAAW+J,EACdhE,EAAG8C,YAAcoB,EAAe9L,GAChC4H,EAAGkD,mBAAqBiB,EAAsB/L,EAAM4L,GACpDhE,EAAG+C,eAAiB3K,EAAK4L,GAAG9J,MAC5BwJ,EAAY1D,GACZ4D,EAAYxL,GACZ8J,GAAW,GAZf,6CA5B0H,sBAoD1H,SAASgC,EAAe9L,GACpB,IAAIsK,EAAyB,GAU7B,OATYoB,OAAOC,KAAK3L,GACpBkH,KAAI,SAACC,GACL,IAAM6E,EAAoB,CACtB1J,OAAQtC,EAAKmH,GAAMrF,MACnBS,OAAQvC,EAAKmH,GAAMhG,YACnBiB,IAAK+E,GAETmD,EAAQvI,KAAKiK,MAEV1B,EAGX,SAASyB,EAAsB/L,EAAW8C,GACtC,IAAIwH,EAAyB,GACjBoB,OAAOC,KAAK3L,GAQxB,OAPiB0L,OAAOC,KAAK3L,EAAK8C,GAAOmJ,aAChC/E,KAAI,SAACC,GACV,IAAM6E,EAAoB,CACtBjB,MAAO5D,GAEXmD,EAAQvI,KAAKiK,MAEV1B,EAOX,OAJAP,qBAAU,YA/EgH,mCAgFtHmC,KACD,IAGC,yBAAKnO,UAAU,OACX,kBAACF,EAAD,CAAsBM,SAAUK,EACVJ,YAAaN,EAAMiB,QAAQI,YAC/C0K,EAGG,yBAAK9L,UAAU,aAAf,cAHQ,kBAACoG,EAAD,CAASnB,eAAgBlF,EAAMkF,eAAgBoB,UAAU,kBAC9D,kBAAC,EAAD,CAAmB0C,SAAUA,EAAUzE,eA7C3B,SAACS,GACzB,IAAI8E,EAA6Bd,EACjCc,EAAGkD,mBAAqBiB,EAAsBR,EAAUzI,GACxD8E,EAAG+C,eAAiBY,EAASzI,GAAOhB,MACpC8F,EAAG/F,SAAWiB,EACdwI,EAAY1D,GACZsD,GAAmBD,IAuC0DlM,QAASjB,EAAMiB,QAASuB,YAAaxC,EAAMkF,eAAgB3C,OAAQvC,EAAMuC,WChF9J,IAAM8L,EAAcC,YAAUrE,GAC9BoE,EAAYE,QAEZ,IRToFF,EAAoDG,EQSlIhM,EAA0B,SAACwE,GAC7BqH,EAAYI,KAAKzH,IAGf0H,EAAkC,SAAC5J,GACrCuJ,EAAYI,KAAK3J,IAGf6J,EAA8B,SAAC7J,GACjCuJ,EAAYI,KAAK3J,IAGf8J,EAAwC,SAAC9J,GAC3CuJ,EAAYI,KAAK3J,IAGf+J,EAAsB,IAAIC,gBAAgBxH,OAAOC,SAASwH,QAC1DrI,GAAyBmI,EAAGG,IAAI,UAChCC,GAAwBJ,EAAGG,IAAI,QAErCE,IAASC,OACL,8BR9BgFd,EQ+BrDA,ER/ByGG,EQgC5H,CACI,SAAY,gBAAEY,EAAF,EAAEA,MAAF,OAAa,kBAACzF,EAAD,CAAczE,eAAgB1C,EAAauE,SAAU2H,EAAiBnM,OAAQoM,EAAevG,MAAOgH,EAAMhF,QAAQhC,MAAOnH,QAASmO,EAAMhF,QAAQnJ,QAASyF,QAASA,MAC3L,OAAU,gBAAE0I,EAAF,EAAEA,MAAF,OAAa,kBAACvD,EAAD,CAAa3G,eAAgB1C,EAAauE,SAAU2H,EAAiBnM,OAAQoM,EAAevG,MAAOgH,EAAMhF,QAAQhC,MAAOnH,QAASmO,EAAMhF,QAAQnJ,WACtK,MAAS,gBAAEmO,EAAF,EAAEA,MAAF,OAAa,kBAACtD,EAAD,CAAmB5G,eAAgB1C,EAAauE,SAAU2H,EAAiBnM,OAAQoM,EAAevG,MAAOgH,EAAMhF,QAAQhC,MAAOnH,QAASmO,EAAMhF,QAAQnJ,WAC3K,OAAU,gBAAEmO,EAAF,EAAEA,MAAF,OAAa,kBAAC/C,EAAD,CAAiBnH,eAAgB1C,EAAavB,QAASmO,EAAMhF,QAAQnJ,QAASsB,OAAQoM,EAAe1J,eAAgB2J,KAC5I,SAAa,gBAAEQ,EAAF,EAAEA,MAAF,OAAa,kBAAClC,EAAD,CAAchI,eAAgB1C,EAAavB,QAASmO,EAAMhF,QAAQnJ,QAASsB,OAAQoM,EAAgBrB,KAAM2B,MACnI,eAAmB,gBAAEG,EAAF,EAAEA,MAAF,OAAa,kBAACvF,EAAD,CAAe3E,eAAgB1C,EAAavB,QAASmO,EAAMhF,QAAQnJ,QAASsB,OAAQoM,EAAetJ,QAAS+J,EAAMhF,QAAQG,iBAC1J,GAAI,gBAAE6E,EAAF,EAAEA,MAAF,OAAa,4CAAkBA,EAAM9M,MAAxB,yBRrCxB9B,IAAM2G,eAAc,WAAgE,IAAD,EAC3DR,mBAAS0H,EAAYe,OADsC,mBACjFC,EADiF,KACvEC,EADuE,KAExFrD,qBAAU,WACR,IAAMsD,EAAsC,SAAAH,GAC1C,OAAOE,EAASF,IAGlB,OADAf,EAAYmB,aAAaD,GAClB,WACLlB,EAAYoB,IAAIF,MAEjB,CAAClB,EAAaG,IACjB,IAAMkB,EA0BV,SAASC,EAA0DP,EAAmBQ,GACpF,GAAqB,kBAAVR,EAAoB,CAC7B,IAAMS,EAAYD,EAAOR,GACzB,YAAkBzG,IAAdkH,OACwBlH,IAAlBiH,EAAOR,GAAuBQ,EAAO,IAAMA,EAAOR,GAEnDrF,EAAoB8F,GACpBA,GAEPpN,QAAQmE,MAAM,kDArBpB,SAASkJ,EAA6D9F,GACpE,IAAK,IAAM1F,KAAO0F,EAAK,CACrB,IAAMX,EAAOW,EAAI1F,GACjB,OAAIyF,EAAoBV,GACfA,EAEAyG,EAAuBzG,IAgBvByG,CAAuBD,IAGhC,IACIE,EADE5N,EAAqF,GAEvF6N,EAAQ,EACZ,IAAK,IAAM1L,KAAO8K,EAAO,CACvB,IAAMS,OAA2BlH,IAAfiH,EAAOtL,GAAoBsL,EAAO,IAAMA,EAAOtL,GACjE,GAAIyF,EAAoB8F,GACtBG,IACA7N,EAAOmC,GAAOuL,EACdE,EAAeF,OACV,GAAyB,kBAAdA,EAAwB,CACxC,IAAMI,EAAYN,EAAoBP,EAAM9K,GAAMuL,QAChClH,IAAdsH,IACFD,IACA7N,EAAOmC,GAAO2L,EACdF,EAAeE,IAIrB,GAAc,IAAVD,EACF,OAAOD,EAEP,IAAMG,EAASN,EAAO,UACtB,OAAO,SAAC5P,GAAD,OAAgBkQ,EAAO,CAACd,MAAOpP,EAAMoP,MAAOe,MAAOhO,KA7D/CwN,CAAoBN,EAAS/M,MAAOkM,GACjD,QAAa7F,IAAT+G,EAAoB,CACtB,IAAM1P,EAAa,CAACoP,MAAOC,GAC3B,OAAO7O,IAAM2G,cAAcuI,EAAM1P,GAEjC,OAAO,mDAAyB8B,KAAKC,UAAUsN,EAAS/M,aQwB5D4E,SAASkJ,eAAe,SJ4EpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/J,GACLnE,QAAQmE,MAAMA,EAAMgK,c","file":"static/js/main.35b66a8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-ga.69311753.png\";","import React from 'react';\nimport logoGa from \"../../images/logo-ga.png\";\n\n\n\nexport function HcHeaderGoldenAgents(props: {toolName: string, projectName: string}) {\n        return (\n            <div className=\"hcGaHeader hcMarginBottom4 bgColorBrand1\">\n                <div className=\"hcGaHeaderLogo\">\n                    <img\n                        src={logoGa}\n                        alt=\"Golden Agents logo\" />\n                </div>\n                <div className=\"hcGaHeaderToolName\">\n                    {props.toolName}\n                </div>\n                <div className=\"hcGaHeaderProject\">\n                    {props.projectName}\n                </div>\n                <div className=\"hcGaHeaderHelp\" />\n            </div>\n\n        );\n}\n\n\n\nexport class HclLIconDataSelection extends React.Component {\n    render() {\n        return (\n            <div className=\"hc-ga-icon hc-ga-icon-ds hcRoundedCorners\"/>\n\n        );\n    }\n}\n\n\nexport class HclLIconAlignment extends React.Component {\n    render() {\n        return (\n            <div className=\"hc-ga-icon hc-ga-icon-al hcRoundedCorners\"> </div>\n\n        );\n    }\n}\n","export const appName = \"Lenticular Lenses\";\n//export const APP_HOME = \"http://localhost:3000/\";\nexport const APP_HOME = \"https://lensgui.sd.di.huc.knaw.nl\";\n//export const API_LOCATION = \"\";\nexport const API_LOCATION = \"https://recon.diginfra.net/\";\n//export const API_LOCATION = \"http://localhost:8000/\";\nexport const GOLDEN_AGENTS_REPOSITORY = \"datasets?endpoint=https://repository.goldenagents.org/v5/graphql\";\nexport const AUTH_SERVER = \"https://secure.huygens.knaw.nl/saml2/login\";","import React from 'react';\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    AlignmentLinkComparePage,\n    IAlignmentList, IClusterList,\n    IDoubleList,\n    IDsList,\n    ILinkList, IReloadDatasets, ISendEvent, ISetIndex, ISetBufferIndex, ISetBufferIndexEvent, ISetJob, ISetJobEvent,\n    ITripleList\n} from \"../../misc/interfaces\";\nimport {IJob, IJobDataSet, ILensSpecs, ILinkSetSpecs} from \"../../misc/apiInterfaces\";\nimport {defaultIJobDataSet} from \"../../misc/functions\";\nimport {API_LOCATION} from \"../../misc/config\";\n\n\nexport function HcLlListItemMinimal(props: { title: string }) {\n\n    return (\n        <div className=\"hcEntityName\">\n            {props.title}\n        </div>\n\n\n    );\n}\n\nexport function HcLlSelectEntityFromList(props: { title: string, setIndex: string, jobData: IJob, switchState: ISendEvent, setJob: ISetJobEvent }) {\n    let formData: IJob = {\n        entity_type_selections: props.jobData.entity_type_selections,\n        job_description: props.jobData.job_description,\n        job_id: props.jobData.job_id,\n        job_link: props.jobData.job_link,\n        job_title: props.jobData.job_title,\n        lens_specs: props.jobData.lens_specs,\n        linkset_specs: props.jobData.linkset_specs\n    }\n\n    async function sendJob(data: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(formData)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            const sj: ISetJob = {\n                type: \"SET_JOB\",\n                value: formData\n            }\n            props.setJob(sj);\n            props.switchState(\"ENTITY\");\n        } else {\n            console.log(json);\n        }\n    }\n\n    return (\n        <div className=\"hcEntityName\" onClick={() => {\n            const dataSet: IJobDataSet = defaultIJobDataSet();\n            dataSet.id = formData.entity_type_selections.length;\n            dataSet.dataset.dataset_id = props.setIndex;\n            dataSet.dataset.collection_id = props.title;\n            formData.entity_type_selections.push(dataSet);\n\n            sendJob(formData);\n        }}>\n            {props.title}\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemMinimal2Fields(props: { fields: IDoubleList, setIndex: string, parentCallback: ISetIndex }) {\n    const active: boolean = props.fields.key == props.setIndex;\n    let klasse: string = \"\";\n    if (active) {\n        klasse = \"hcAlignVerticalActive hcIsLink\";\n    } else {\n        klasse = \"hcAlignVertical hcIsLink\";\n    }\n\n\n    return (\n        <div className={klasse} onClick={() => props.parentCallback(props.fields.key)}>\n            <div>\n                {props.fields.field1}\n                <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                    {props.fields.field2}\n                </div>\n            </div>\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListLabel(props: { title: string }) {\n\n    return (\n        <div className=\"hcLabel\">\n            {props.title}\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemDataSelection(props: { parentCallBack: ISendEvent, idsList: IDsList, jobData:IJob, setJob: ISetJobEvent, reload: IReloadDatasets, setBufferIndex: ISetBufferIndexEvent }) {\n    function duplicate(index: number): void {\n        let job = props.jobData;\n        const buffer = JSON.parse(JSON.stringify(job.entity_type_selections));\n        let currentDataSet: IJobDataSet = buffer[index];\n        job.entity_type_selections.push(currentDataSet);\n        sendJob(job);\n    }\n\n    function remove(index: number): void {\n        let job = props.jobData;\n        job.entity_type_selections.splice(index, 1);\n        sendJob(job);\n    }\n\n    async function sendJob(job: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(job)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            update_data(job);\n        } else {\n            console.log(json);\n        }\n    }\n\n    function update_data(job: IJob) {\n        const struc:ISetJob = {\n            type: \"SET_JOB\",\n            value: job\n        }\n        props.setJob(struc);\n        props.reload();\n    }\n\n    function loadPage(index: number): void {\n        const struc: ISetBufferIndex = {\n            type: \"SET_INDEX\",\n            value: index\n        };\n        props.setBufferIndex(struc);\n        props.parentCallBack(\"DATASET_DETAIL\");\n    }\n\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\" onClick={() => {loadPage(props.idsList.dsIndex)}}>\n                <strong><HclLIconDataSelection/> {props.idsList.dsName}</strong>\n                <div className=\"hcSmallTxt\">\n                    {props.idsList.dsDataset}\n                </div>\n                <div className=\"hcSmallTxt\">\n                    {props.idsList.dsProvider}\n                </div>\n            </div>\n            <div className=\"hcListActionItem\" onClick={() => {alert(\"No samples available.\");}}>Show sample</div>\n            <div className=\"hcListActionItem\" onClick={() => {duplicate(props.idsList.dsIndex)}}>Duplicate</div>\n            <div className=\"hcListActionItem\" onClick={() => {remove(props.idsList.dsIndex)}}>Delete</div>\n        </div>\n    );\n}\n\n\nexport function HcLlListItemAlignment(props: IAlignmentList) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\">\n                <strong> <HclLIconAlignment/>{props.prName}</strong>\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prSource}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prSource}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prTarget}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prLinks}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prCusters}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prStatus}\n            </div>\n            <div><a href=\"\">Duplicate</a></div>\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemAlignmentLinks(props: { links: ILinkList }) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\">{props.links.strength}</div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/></div>\n                <strong></strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey hcTextTruncate\"></div>\n            </div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/></div>\n                <strong></strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey hcTextTruncate\"></div>\n            </div>\n            <div className=\"hcListItemLong\">\n                <button type=\"button\" name=\"button\">Compare</button>\n                <button className=\"bgColorBrand2\">Accept</button>\n                <button className=\"hcClrBg_Error\">Decline</button>\n            </div>\n        </div>\n    );\n\n}\n\n\nexport function HcLlListItemAlignmentClusters(props: { cluster: IClusterList }) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcSmallTxt\">391</div>\n            <div className=\"hcSmallTxt\">73.642</div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/> foaf_name</div>\n                <strong>Mary Jans</strong>\n            </div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/> Schema_Name</div>\n                <strong>Brugge-Antwerpen</strong>\n            </div>\n            <div className=\"hcSmallTxt hcTxtCenter\"> x</div>\n            <div className=\"hcSmallTxt hcTxtCenter\"> x</div>\n            <div className=\"hcSmallTxt\"> 2345234542</div>\n        </div>\n    );\n}\n\n\nexport function HcLlListItemAlignmentClusterViewItem(props: ITripleList) {\n\n    return (\n        <div>\n            <div>\n                <div>{props.field1}</div>\n                <strong>{props.field2}</strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey\">{props.field3}</div>\n            </div>\n        </div>\n\n    );\n}\n\n\nexport function HcResultListPaging() {\n\n    return (\n        <div className=\"hcPagination\">\n            {/*<div><a href=\"#\">← Previous</a></div>\n            <div><a href=\"#\">1</a></div>\n            <div className=\"bgColorBrand2\"><a href=\"#\">2</a></div>\n            <div><a href=\"#\">3</a></div>\n            <div><a href=\"#\">4</a></div>\n            <div><a href=\"#\">5</a></div>\n            <div><a href=\"#\">6</a></div>\n            <div><a href=\"#\">Next →</a></div>*/}\n        </div>\n    );\n}\n","import {ICondition, IFilter, IJobDataSet} from \"./apiInterfaces\";\nimport {AUTH_SERVER} from \"./config\";\n\nexport function defaultIJobDataSet() {\n    const ds: IJobDataSet = {\n        dataset: {\n            collection_id: \"\",\n            dataset_id: \"\",\n            published: null,\n            timbuctoo_graphql: AUTH_SERVER,\n            timbuctoo_hsid: null\n        },\n        id: -1,\n        label: \"New data selection\",\n        description: \"Description\",\n        filter: {\n            conditions: [{\n                property: []\n            }],\n            type: \"AND\"\n        },\n        limit: -1,\n        properties: [],\n        random: false,\n        related: [],\n        related_array: false\n    }\n    return ds;\n}","import React from 'react';\nimport {ISendEvent} from \"../../misc/interfaces\";\n\nexport function HcLlSubNavigation(props: { pageTitle: string, isDs: boolean, isAl: boolean }) {\n    return (\n        <div className=\"hcContentContainer hcMarginBottom4\">\n            <div className=\"hcRowJustifyTop\">\n                <div className=\"hcBasicSideMargin\">\n                    <h3>{props.pageTitle}</h3>\n                </div>\n                <div className=\"hcBasicSideMargin hcAlignRight hcGaTabsLoudness1\">\n                    <a href=\"\" className={(props.isDs ? 'hcSelected' : '')}>Data Selection</a>\n                    <a href=\"\" className={(props.isAl ? 'hcSelected' : '')}>Alignment</a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport function HcModal(props: { parentCallBack: ISendEvent, modalName: string, children: object }) {\n    return (\n        <div className=\"hcModal\">\n            <div className=\"hcContentContainer\">\n                <div className=\"hcModelContentWrap\">\n\n                    <div className=\"hcBasicSideMargin hc2columns hcMarginBottom2 hcMarginTop2\">\n                        <h3>{props.modalName}</h3>\n                        <div className=\"hcTxtRight hcIsLink\" onClick={() => props.parentCallBack(\"ENTITY\")}>Close</div>\n                    </div>\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport function HcLlCompareItem(props: { label: string, content: string }) {\n    return (\n        <React.Fragment>\n            <div>\n                <div className=\"hcLabel\">{props.label}</div>\n                <div className=\"hcMarginBottom1 hcSmallTxt\">{props.content}</div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\nexport function HcLlAlignmantInfoBar(props: { infoSources: number, infoTargets: number, infoLinks: number, infoClusters: number }) {\n    return (\n        <div className=\"hcContentContainer hcMarginBottom3\">\n            <div className=\"hcRowJustify hcStickOutBox hcRoundedCorners\">\n                <div className=\"hc4columns\">\n                    <div className=\"hcBasicSideMargin\">\n                        Sources: <strong>{props.infoSources}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Targets: <strong>{props.infoTargets}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Links <strong>{props.infoLinks}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Clusters: <strong>{props.infoClusters}</strong>\n                    </div>\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\">Reconcile</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport {\n    HcLlListItemMinimal,\n    HcLlListItemMinimal2Fields,\n    HcLlListLabel,\n    HcLlListItemDataSelection,\n    HcLlListItemAlignment,\n    HcResultListPaging,\n    HcLlListItemAlignmentLinks,\n    HcLlListItemAlignmentClusters,\n} from './ListItems';\nimport {HcLlSubNavigation} from './Utils';\nimport {useState} from \"react\";\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    IHomePage,\n    IDataSelectionListPage,\n    IModalSelectDatasetPage,\n    IAlignmentListPage,\n    IAlignmentDetailPage,\n    ISendEvent,\n    ISetValueEvent,\n    ISetValue,\n    ISetJobEvent,\n    ISetIndex,\n    ISetBufferIndex,\n    IReloadDatasets,\n    ISetBufferIndexEvent,\n    IDataSelectionDetailPage, IDataSetDetailForm, ISetJob\n} from \"../../misc/interfaces\";\nimport { IJob, IJobBasic, ILensSpecs, ILinkSetSpecs, IUpdateJob} from \"../../misc/apiInterfaces\";\nimport {API_LOCATION, APP_HOME, AUTH_SERVER} from \"../../misc/config\";\n\nexport function HcLlLayoutHome(props: { pageData: IHomePage, parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob: ISetJobEvent, jobID: string, qsJobID: string }) {\n    let projectID: string = props.qsJobID;\n    const [error, setError] = useState(\"\");\n\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>) {\n        projectID = e.currentTarget.value;\n    }\n\n    function submit() {\n        if (projectID === \"\") {\n            setError(\"No research ID given!\");\n        } else {\n            getProject();\n        }\n    }\n\n    function doLogin() {\n        const form = document.createElement('form');\n        form.action = AUTH_SERVER;\n        form.method = 'POST';\n        form.innerHTML = `<input name=\"hsurl\" value=${window.location} type=\"hidden\" />`;\n        form.style.display = 'none';\n        document.body.appendChild(form);\n        form.submit();\n    }\n\n    async function getProject() {\n        const url = API_LOCATION + \"job/\" + projectID;\n        try {\n            const response = await fetch(url);\n            const json: IJob = await response.json();\n            const struc: ISetValue = {type: \"SET_ID\", value: json.job_id};\n            props.setValue(struc);\n            props.parentCallBack(\"FETCH\");\n        } catch (err) {\n            setError(\"Job not found! Try again with a correct job ID.\");\n        }\n    }\n\n    return (<div className=\"hcContentContainer hcMarginBottom4 hcMarginTop5\">\n        <div className=\"hc2columns\">\n\n            {/* left column */}\n            <div className=\"hcMarginBottom2 hcBasicSideMargin\">\n                <h2>\n                    New research\n                </h2>\n                Start a new research to reconcile one or more datasets.\n                <br/>\n                <br/>\n                <button type=\"button\" name=\"button\" onClick={() => props.parentCallBack(\"NEW\")}>\n                    New research\n                </button>\n                <div className=\"hcLoginArea\">\n                    <h2>Login</h2>\n                    Login to get access to private datasets.\n                    <button type=\"button\" name=\"loginButton\" className=\"loginBtn\" onClick={() => {doLogin()}}>\n                        Login\n                    </button>\n                </div>\n            </div>\n\n            {/* right column */}\n            <div className=\"hcBasicSideMargin hcMarginBottom4\">\n                <h2>Existing research</h2>\n                <div>&nbsp;</div>\n                {/*<div className=\"hcList hcMarginBottom4\">\n                    {props.pageData.projectList.map(item => (<HcLlListItemMinimal title={item.prName}/>))}\n                </div>*/}\n                <div className=\"hcStickOutBox hcRoundedCorners\">\n                    <p className=\"hcMarginBottom1\">\n                        Enter your research ID:\n                    </p>\n                    <input type=\"text\" name=\"projectID\" onChange={handleChange} className=\"hcMarginBottom1\" defaultValue={props.qsJobID}/>\n                    <button type=\"button\" name=\"button\" onClick={submit}>\n                        Load research\n                    </button>\n                </div>\n            </div>\n            <div className=\"errorMsg\">{error}</div>\n        </div>\n    </div>);\n}\n\n\nexport function HcLlLayoutProjectDetail(props: { parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob: ISetJobEvent, jobID: string, jobData: IJob }) {\n    let formData: IJobBasic = {\n        job_title: props.jobData.job_title,\n        job_description: props.jobData.job_description,\n        job_link: props.jobData.job_link\n    };\n\n    let nw: boolean = false;\n\n    if (props.jobID === \"\") {\n        nw = true;\n    }\n\n    const [newJob, setNewJob] = useState<boolean>(nw);\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>): void {\n        switch (e.currentTarget.name) {\n            case \"job_title\":\n                formData.job_title = e.currentTarget.value;\n                break;\n            case \"job_link\":\n                formData.job_link = e.currentTarget.value;\n                break;\n        }\n    }\n\n    function handleTextChange(e: React.FormEvent<HTMLTextAreaElement>): void {\n        formData.job_description = e.currentTarget.value;\n    }\n\n    function sendData() {\n        if (newJob) {\n            sendNew();\n        } else {\n            sendUpdate();\n        }\n    }\n\n    async function sendNew() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(formData)\n        };\n        const response = await fetch(API_LOCATION + \"/job/create\", requestOptions);\n        const data = await response.json();\n        console.log(data);\n        if (data.result === \"created\") {\n            props.setValue({type: \"SET_ID\", value: data.job_id});\n        }\n        window.location.href = APP_HOME + \"?job_id=\" + data.job_id;\n        //props.parentCallBack(\"FETCH\");\n    }\n\n    async function sendUpdate() {\n        let updateValues: IUpdateJob = {\n            job_id: props.jobData.job_id,\n            job_title: formData.job_title,\n            job_description: formData.job_description,\n            job_link: formData.job_link\n        }\n\n\n\n        if (props.jobData.entity_type_selections !== null) {\n            updateValues.entity_type_selections = props.jobData.entity_type_selections;\n        }\n\n        if (props.jobData.lens_specs !== null) {\n            updateValues.lens_specs = props.jobData.lens_specs;\n        }\n\n        if (props.jobData.linkset_specs !== null) {\n            updateValues.linkset_specs = props.jobData.linkset_specs;\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(updateValues)\n        };\n        const response = await fetch(API_LOCATION + \"job/update\", requestOptions);\n        console.log(response);\n        const data = await response.json();\n        if (data.result !== undefined && data.result === \"updated\") {\n            props.setValue({type: \"SET_ID\", value: data.job_id});\n        }\n\n    }\n\n\n    return (<div className=\"hcContentContainer hcMarginBottom4 hcMarginTop5\">\n        <form className=\"hc2columns\">\n\n            {/* left column */}\n            <div className=\"hcMarginBottom2 hcBasicSideMargin hcForm\">\n                <h3>Research name</h3>\n                <input type=\"text\" name=\"job_title\" defaultValue={formData.job_title} onChange={handleChange}\n                       className=\"hcMarginBottom2\"/>\n\n                <h3>Research description</h3>\n                <textarea className=\"hcMarginBottom1\" name=\"job_description\"\n                          defaultValue={formData.job_description} onChange={handleTextChange}>\n\n                </textarea>\n\n                <h3>Research link</h3>\n                <input type=\"text\" name=\"job_link\" defaultValue={formData.job_link} onChange={handleChange}\n                       className=\"hcMarginBottom2\"/>\n                <button type=\"button\" onClick={() => props.parentCallBack(\"RESEARCH\")}>Back</button>\n                <button type=\"button\" onClick={() => sendData()}>Save research</button>\n                {!newJob ? (\n                    <button type=\"button\" onClick={() => props.parentCallBack(\"ENTITY\")}>Next</button>\n                ) : (<div/>)}\n            </div>\n\n            {/* right column */}\n            <div className=\"hcBasicSideMargin hcMarginBottom4\"></div>\n        </form>\n    </div>);\n\n}\n\n\nexport function HcLlLayoutDataSelectionOverview(props: { parentCallBack: ISendEvent, pageData: IDataSelectionListPage, jobData:IJob, setJob: ISetJobEvent, setBufferIndex: ISetBufferIndexEvent }) {\n    const [refresh, setRefresh] = useState(true);\n\n    const reload: IReloadDatasets = () => {\n        setRefresh(!refresh);\n    }\n\n    return (<React.Fragment>\n        <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                           isDs={props.pageData.pageNavDs}/>\n\n        <div className=\"hcContentContainer hcMarginBottom2\">\n            <div className=\"hcRowJustify\">\n                <div className=\"hcBasicSideMargin\">\n                    The data selection contains the selections of datasets you will work with.\n                    <br/>They can be entities with filters on them.\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\" onClick={() => props.parentCallBack(\"DATASETS\")}>\n                        New data selection\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"hcContentContainer hcMarginBottom5\">\n            <div className=\"hcResultsHeader hcMarginBottom1 hcBasicSideMargin\">\n                <div>\n                    {/* labels */}\n                    <HcLlListLabel title=\"Data selections\"/>\n                </div>\n\n                {/*<div>\n                    <select className=\"\" name=\"\">\n                        <option value=\"\">Order by name</option>\n                        <option value=\"\">Order by date updated</option>\n                        <option value=\"\">Order by date create</option>\n                    </select>\n                </div>*/}\n            </div>\n\n            <div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                {/* results */}\n                {props.pageData.dsList.map(item => (\n                    <HcLlListItemDataSelection parentCallBack={props.parentCallBack} idsList={item} jobData={props.jobData} setJob={props.setJob} reload={reload} setBufferIndex={props.setBufferIndex} />))}\n            </div>\n            {/* pagination */}\n            <HcResultListPaging/>\n        </div>\n    </ React.Fragment>);\n}\n\n\nexport function HcLlDataSelectionDetail(props: { pageData: IDataSelectionDetailPage, parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, dsIndex: number}) {\n    const [tab, setTab] = useState(\"info\");\n    const formData: IDataSetDetailForm = {\n        label: props.pageData.pageTitle,\n        description: props.pageData.description\n    }\n\n    function change(item: string) {\n        setTab(item);\n    }\n\n    function submit() {\n        let job = props.jobData;\n        job.entity_type_selections[props.dsIndex].label = formData.label;\n        job.entity_type_selections[props.dsIndex].description = formData.description;\n        sendJob(job);\n    }\n\n    async function sendJob(job: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(job)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            update_data(job);\n        } else {\n            console.log(json);\n        }\n    }\n\n    function update_data(job: IJob) {\n        const struc: ISetJob = {\n            type: \"SET_JOB\",\n            value: job\n        }\n        props.setJob(struc);\n        props.parentCallBack(\"ENTITY\");\n    }\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>): void {\n        switch (e.currentTarget.name) {\n            case \"label\":\n                formData.label= e.currentTarget.value;\n                break;\n        }\n    }\n\n    function handleTextChange(e: React.FormEvent<HTMLTextAreaElement>): void {\n        formData.description = e.currentTarget.value;\n    }\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs}/>\n            {/*<div className=\"hcContentContainer hcMarginBottom3\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        <h3><HclLIconDataSelection/>\n                            {props.pageData.pageTitle}</h3>\n                    </div>\n                </div>\n            </div>*/}\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info\" onClick={() => setTab(\"info\")}>Info</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-dataset\" onClick={() => setTab(\"set\")}>Dataset</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-filter\" onClick={() => setTab(\"filter\")}>Filter</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-sample\" onClick={() => setTab(\"sample\")}>Sample</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-relation\" onClick={() => setTab(\"relation\")}>Relation</div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        {tab === \"info\" ? (\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info\">\n                            <h3>Label</h3>\n                            <input type=\"text\" name=\"label\" defaultValue={props.pageData.pageTitle} className=\"hcMarginBottom2\"  onChange={handleChange}/>\n                            <h3>Description</h3>\n                            <textarea name=\"description\" rows={4} defaultValue={props.pageData.description} className=\"hcMarginBottom1\"  onChange={handleTextChange}/><br/>\n                            <button type=\"button\" name=\"button\" onClick={() => submit()}>\n                                Save research\n                            </button>\n                            <button type=\"button\" name=\"back\" onClick={() => {props.parentCallBack(\"ENTITY\")}}>\n                                Back\n                            </button>\n                        </div>) : (<div/>)\n                        }\n                        {/* tab: Dataset and entity */}\n                        {tab === \"set\" ? (\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-dataset\">\n                            <h3>Dataset and entity</h3>\n                            <div>\n                                <div className=\"hc2columns hcMarginBottom2\">\n                                    <div>\n                                        <div className=\"hcLabel\">dataset</div>\n                                        {props.pageData.dataset}\n                                        {/*<div className=\"hcSmallTxt hcClrTxt_Grey\">\n                                            Enriched version of the Index op ondertrouwregisters. Enrichment by\n                                            Golden Agents.\n                                        </div>*/}\n                                    </div>\n                                    <div>\n                                        <div className=\"hcLabel\">entity</div>\n                                        {props.pageData.collection}\n                                    </div>\n                                </div>\n                                <button type=\"button\" name=\"button\">\n                                    Select data\n                                </button>\n                            </div>\n\n                        </div>) : (<div/>)\n                        }\n\n                        {/* tab: Filter */}\n                        {tab === \"filter\" ? (\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-filter\">\n                            <h3>Filter</h3>\n\n\n                        </div>) : (<div/>)\n                        }\n\n                        {/* tab: Sample */}\n                        {tab === \"sample\" ? (\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-sample\">\n                            <h3>Sample</h3>\n                            <div className=\"hc2columns\">\n                                <div>Only use a sample of this amount of records (-1 is no limit)</div>\n                                <div><input type=\"number\" value=\"-1\"/></div>\n                            </div>\n                        </div>) : (<div/>)\n                        }\n\n                        {/* tab: Relation */}\n                        {tab === \"relation\" ? (\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-relation\">\n                            <h3>Relation</h3>\n                        </div>) : (<div/>)\n                        }\n\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlSelectDataset(props: { pageData: IModalSelectDatasetPage, parentCallback: ISetIndex }) {\n\n    return (\n        <React.Fragment>\n            <div className=\" hc2columns\">\n                <div className=\"hcList hcMarginBottom4 hcBasicSideMargin hcMaxhalf\">\n                    {props.pageData.datasetList.map(item => (\n                        <HcLlListItemMinimal2Fields fields={item} setIndex={props.pageData.setIndex} parentCallback={props.parentCallback}/>))}\n\n                </div>\n                <div className=\"hcBasicSideMargin hcClrBg_Grey05 hcleftMark\">\n                    <div className=\"hcMarginTop2\">\n                        <strong>\n                            {props.pageData.detailInfoName}\n                        </strong>\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                        {props.pageData.detailInfoProvider}\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey hcMarginBottom1\">\n                        {props.pageData.detailInfodescription}\n                    </div>\n                    <div className=\"hcLabel\">Entity</div>\n                    <div className=\"hcList \">\n                        {props.pageData.detailInfoEntities.map(item => (\n                            <HcLlListItemMinimal title={item.field} />))}\n                    </div>\n                </div>\n            </div>\n\n\n        </ React.Fragment>);\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlLayoutAlignmentOverview(props: { pageData: IAlignmentListPage }) {\n\n    return (\n        <React.Fragment>\n\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs}/>\n\n            <div className=\"hcContentContainer hcMarginBottom2\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        Alignments\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        <button type=\"button\" name=\"button\">\n                            New aligment\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n\n                <div className=\"hcList hcMarginBottom1 hcBasicSideMargin\">\n                    <div className=\"hcListHeader\">\n\n                        <div className=\"hcLabel hcListItemLong\">Name</div>\n                        <div className=\"hcLabel hcTxtRight\">Source</div>\n                        <div className=\"hcLabel hcTxtRight\">Targets</div>\n                        <div className=\"hcLabel hcTxtRight\">Links</div>\n                        <div className=\"hcLabel hcTxtRight\">Clusters</div>\n                        <div className=\"hcLabel\">Status</div>\n\n                        <select className=\"\" name=\"\">\n                            <option value=\"\">Order by name</option>\n                            <option value=\"\">Order by date updated</option>\n                            <option value=\"\">Order by date create</option>\n                        </select>\n\n                    </div>\n                </div>\n\n                <div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                    {/* results */}\n                    {props.pageData.alignmentList.map(item => (\n                        <HcLlListItemAlignment prName={item.prName} prSource={item.prSource}\n                                               prTarget={item.prTarget} prLinks={item.prLinks}\n                                               prCusters={item.prCusters} prStatus={item.prStatus}/>))}\n\n                </div>\n                {/* pagination */}\n                <HcResultListPaging/>\n            </div>\n\n\n        </ React.Fragment>);\n}\n\n\nexport function HcLlAlignmentDetail(props: { pageData: IAlignmentDetailPage }) {\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs}/>\n            <div className=\"hcContentContainer hcMarginBottom3\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        <h3><HclLIconAlignment/> Getty & Frick vs NA:: soundex 0,85</h3>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info-a\">Info</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-matching-settings\">Matching\n                            settings\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-links\">Links</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-clusters\">Clusters</div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info-a\">\n                            <h3>Name</h3>\n                            <input type=\"text\" name=\"name\" defaultValue=\"defaultValue\" className=\"hcMarginBottom2\"/>\n                            <h3>Description</h3>\n                            <textarea name=\"name\" rows={4} className=\"hcMarginBottom1\"/>\n                            <button type=\"button\" name=\"button\">\n                                Save research\n                            </button>\n                        </div>\n\n                        {/* tab: matching-settings */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-matching-settings\">\n                            <h3>Sources</h3>\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.matchSetSrc.map(item => (<div className=\"hcRowJustify\">\n                                    <div><HclLIconDataSelection/> {item}</div>\n                                    <div className=\"hcTxtRight\"><a href=\"\">Delete</a></div>\n                                </div>))}\n                            </div>\n                            <button type=\"button\" className=\"hcMarginBottom2\">Add source</button>\n\n                            <h3>Targets</h3>\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.matchSetTrg.map(item => (<div className=\"hcRowJustify\">\n                                    <div><HclLIconDataSelection/> {item}</div>\n                                    <div className=\"hcTxtRight\"><a href=\"\">Delete</a></div>\n                                </div>))}\n                            </div>\n                            <button type=\"button\" className=\"hcMarginBottom2\">Add target</button>\n\n\n                        </div>\n\n                        {/* tab: Links */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-links\">\n                            <div className=\"hcList hcMarginBottom1\">\n                                <div className=\"hcListHeader\">\n                                    <div className=\"hcLabel\">Strenght</div>\n                                    <div className=\"hcLabel hcListItemLong\">Source</div>\n                                    <div className=\"hcLabel hcListItemLong\">Targets</div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                </div>\n                            </div>\n\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.links.map(item => (\n                                    <HcLlListItemAlignmentLinks links={item}/>))}\n                            </div>\n                        </div>\n\n                        {/* tab: Clusters */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-clusters\">\n                            <div className=\"hcList hcMarginBottom1\">\n                                <div className=\"hcListHeader\">\n                                    <div className=\"hcLabel\">Size</div>\n                                    <div className=\"hcLabel\">Links</div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                    <div className=\"hcLabel hcTxtCenter\">Extened</div>\n                                    <div className=\"hcLabel hcTxtCenter\">Reconciled</div>\n                                    <div className=\"hcLabel \">ID</div>\n                                </div>\n                            </div>\n\n                            <div className=\"hcList hcListDisctinctLines hcMarginBottom2\">\n                                {props.pageData.clusters.map(item => (\n                                    <HcLlListItemAlignmentClusters cluster={item}/>))}\n                            </div>\n\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutHome} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValueEvent} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {appName} from \"../../misc/config\";\n\n\nexport default function ResearchPick(props: {parentCallBack: ISendEvent, setValue:ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob, qsJobID:string | null}) {\n    const homeData =\n        {\n            \"pageTitle\": \"Home\",\n            \"projectList\": []\n        }\n        let qsID = \"\";\n        if (props.qsJobID !== null) {\n            qsID = props.qsJobID;\n        }\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName='Select research' />\n            <HcLlLayoutHome pageData={homeData} parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} qsJobID={qsID}/>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport {ISendEvent, ISetJobEvent, IDataSelectionDetailPage} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlDataSelectionDetail} from \"../page_elements/Pages\";\nimport {appName} from \"../../misc/config\";\n\nexport function DataSetDetail(props: {parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, dsIndex: number}) {\n    const pd: IDataSelectionDetailPage = {\n        \"pageTitle\": props.jobData.entity_type_selections[props.dsIndex].label,\n        \"description\": props.jobData.entity_type_selections[props.dsIndex].description,\n        \"dataset\": props.jobData.entity_type_selections[props.dsIndex].dataset.dataset_id,\n        \"collection\": props.jobData.entity_type_selections[props.dsIndex].dataset.collection_id,\n        \"pageNavDs\": true,\n        \"pageNavAl\": false,\n        \"filters\": [\n            {\n                \"filterNr\":1,\n                \"filterSetting\": \"OR\",\n                \"filterRows\": [\n                    {\"entities\": [\"pnv_hasName\",\"pnv_PersonName\",\"ns1_ontology_isInRecordList\",\"ns1_ontology_Boedelinventaris\",\"rdf_type\"]}\n                ],\n                \"condition\":\"Has value\"\n            },\n            {\n                \"filterNr\":2,\n                \"filterSetting\": \"OR\",\n                \"filterRows\": [\n                    {\"entities\": [\"pnv_hasName\",\"pnv_PersonName\",\"ns1_ontology_isInRecordList\",\"ns1_ontology_Boedelinventaris\",\"rdf_type\"]}\n                ],\n                \"condition\":\"Has value\"\n            }\n        ]\n    };\n\n    return (\n        <div className=\"App\">\n        <HcHeaderGoldenAgents toolName={appName} projectName={props.jobData.job_title} />\n    <HcLlDataSelectionDetail pageData={pd} parentCallBack={props.parentCallBack} jobData={props.jobData} setJob={props.setJob} dsIndex={props.dsIndex}/>\n        </div>\n    );\n}","import { StateValue, EventObject, Interpreter, State } from 'xstate';\nimport React, { useEffect, useState, ReactElement } from 'react';\nimport { StateListener } from 'xstate/lib/interpreter';\n\n\ninterface StateDefinition<TContext, Events extends EventObject> {\n  [K: string]: React.FunctionComponent<{state: State<TContext, Events>}> | StateDefinition<TContext, Events>\n}\n\ntype AsStateDefinition<T, TContext, TEvents extends EventObject> = T extends {type: \"parallel\", states: infer Sub} \n  ? ({\n    [K in Exclude<keyof Sub, \"History\">]: AsStateDefinition<Sub[K], TContext, TEvents>\n  } & {\":merge\": React.FunctionComponent<{state: State<TContext, TEvents>, input: {[K in keyof Sub]: React.FunctionComponent<{state: State<TContext, TEvents>}>}}>})\n  : T extends {states: infer Sub}\n    ? React.FunctionComponent<{state: State<TContext, TEvents>}> | {\n      [K in Exclude<keyof Sub, \"History\">]: AsStateDefinition<Sub[K], TContext, TEvents>\n    } | ({\"\": React.FunctionComponent<{state: State<TContext, TEvents>}>} & {\n      [K in Exclude<keyof Sub, \"History\">]?: AsStateDefinition<Sub[K], TContext, TEvents>\n    })\n    : React.FunctionComponent<{state: State<TContext, TEvents>}>\n\nexport function StateMachineComponent<TContext, Schema, Events extends EventObject>(interpreter: Interpreter<TContext, Schema, Events>, screens: AsStateDefinition<Schema, TContext, Events>): ReactElement {\n\n  return React.createElement(function ThisIsAFunctionComponentNoteTheCapitalFirstLetterYo() {\n    const [curState, setState] = useState(interpreter.state);\n    useEffect(() => {\n      const cb: StateListener<TContext, Events> = state => {\n        return setState(state);\n      }\n      interpreter.onTransition(cb);\n      return () => {\n        interpreter.off(cb)\n      }\n    }, [interpreter, screens])\n    const view = pickReactComponents(curState.value, screens as any)\n    if (view !== undefined) {\n      const props: any = {state: curState}\n      return React.createElement(view, props)\n    } else {\n      return <div>No GUI defined for {JSON.stringify(curState.value)}</div>\n    }\n  })\n}\n\nfunction isFunctionComponent<TContext, Events extends EventObject>(val: StateDefinition<TContext, Events> | React.FunctionComponent<{state: State<TContext, Events>}>): val is React.FunctionComponent<{state: State<TContext, Events>}> {\n  return typeof val === \"function\"\n}\n\nfunction getFirstReactComponent<TContext, Events extends EventObject>(val: StateDefinition<TContext, Events>): React.FunctionComponent<{state: State<TContext, Events>}> | undefined {\n  for (const key in val) {\n    const item = val[key]\n    if (isFunctionComponent(item)) {\n      return item\n    } else {\n      return getFirstReactComponent(item)\n    }\n  }\n  return undefined\n}\n\nfunction pickReactComponents<TContext, Events extends EventObject>(state: StateValue, config: StateDefinition<TContext, Events>): React.FunctionComponent<{state: State<TContext, Events>}> | undefined {\n  if (typeof state === \"string\") {\n    const configVal = config[state]\n    if (configVal === undefined) {\n      return (config[state] === undefined ? config[\"\"] : config[state]) as React.FunctionComponent | undefined\n    }\n    else if (isFunctionComponent(configVal)) {\n      return configVal\n    } else {\n      console.error(\"Non-terminal state config for an atomic state!\")\n      return getFirstReactComponent(configVal)\n    }\n  } else {\n    const result: {[key: string]: React.FunctionComponent<{state: State<TContext, Events>}>} = {}\n    let singleResult;\n    let count = 0\n    for (const key in state) {\n      const configVal = config[key]=== undefined ? config[\"\"] : config[key]\n      if (isFunctionComponent(configVal)) {\n        count++\n        result[key] = configVal\n        singleResult = configVal\n      } else if (typeof configVal === \"object\") {\n        const subResult = pickReactComponents(state[key], configVal)\n        if (subResult !== undefined) {\n          count++\n          result[key] = subResult\n          singleResult = subResult\n        }\n      }\n    }\n    if (count === 1) {\n      return singleResult\n    } else {\n      const merger = config[\":merge\"] as any\n      return (props: any) => merger({state: props.state, input: result})\n    }\n  }\n}\n","import {assign, Machine} from \"xstate\";\nimport { IJob, ILensSpecs, ILinkSetSpecs} from \"../misc/apiInterfaces\";\nimport {ISetBufferIndex, ISetJob, ISetValue, ISetValueEvent} from \"../misc/interfaces\";\n\nexport const lenseMachine = Machine<{\n    jobData: IJob,\n    jobID: string,\n    bufferedIndex: number\n}, {\n    states: {\n        idle: {},\n        research: {},\n        create: {},\n        fetch: {},\n        entity: {},\n        datasets: {},\n        dataset_detail: {}\n    }\n}>({\n    id: \"lenticularLens\",\n    initial: \"research\",\n    context: {\n        jobData: {\n            created_at: \"\",\n            entity_type_selections: [],\n            job_description: \"\",\n            job_id: \"\",\n            job_link: \"\",\n            job_title: \"\",\n            lens_specs: [],\n            linkset_specs: [],\n            updated_at: \"\"\n        },\n        jobID: \"\",\n        bufferedIndex: 0\n    },\n    on: {\n        research: \"research\",\n        entity: \"entity\",\n        create: \"create\",\n        fetch: \"fetch\",\n        datasets: \"datasets\",\n        dataset_detail: \"dataset_detail\"\n    },\n    states: {\n        idle: {},\n        research: {\n            on: {\n                NEW: \"create\",\n                FETCH: \"fetch\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value})\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        create: {\n            on: {\n                ENTITY: \"entity\",\n                RESEARCH: \"research\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value}),\n                    target: \"fetch\"\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        fetch: {\n            on: {\n                ENTITY: \"entity\",\n                FETCH: \"fetch\",\n                RESEARCH: \"research\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value}),\n                    target: \"fetch\"\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        entity: {\n            on: {\n                DATASETS: \"datasets\",\n                DATASET_DETAIL: \"dataset_detail\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                },\n                SET_INDEX: {\n                    actions: assign({bufferedIndex: (context, event: ISetBufferIndex) => event.value})\n                }\n            }\n        },\n        datasets: {\n            on: {\n                ENTITY: \"entity\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                },\n                SET_INDEX: {\n                    actions: assign({bufferedIndex: (context, event: ISetBufferIndex) => event.value})\n                }\n            }\n        },\n        dataset_detail: {\n            on: {\n                ENTITY: \"entity\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        }\n    }\n})","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutProjectDetail} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValueEvent} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {appName} from \"../../misc/config\";\n\nexport function NewProject(props: {parentCallBack: ISendEvent, setValue:ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob}) {\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName='New research' />\n            <HcLlLayoutProjectDetail parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} jobData={props.jobData}/>\n        </div>\n    )\n}","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutProjectDetail} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValue, ISetJob, ISetValueEvent} from \"../../misc/interfaces\";\nimport {useState, useEffect} from \"react\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {API_LOCATION, appName} from \"../../misc/config\";\n\nexport function EditProjectBasics(props: { parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob}) {\n    const [loading, setLoading] = useState(true);\n    const [job, setJob] = useState<IJob>(props.jobData);\n\n    async function getProject() {\n        const url = API_LOCATION + \"job/\" + props.jobID;\n        const response = await fetch(url);\n        const json: IJob = await response.json();\n        const struc: ISetJob = {type: \"SET_JOB\", value: json};\n        props.setJob(struc);\n        setJob(json);\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        getProject();\n    }, [loading]);\n\n    return (\n        <div className=\"App\">\n            {loading ? (\n                <HcHeaderGoldenAgents toolName={appName}\n                                      projectName='Loading...'/>\n            ) : (\n                <div>\n                <HcHeaderGoldenAgents toolName={appName} projectName={job.job_title}/>\n                <HcLlLayoutProjectDetail parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} jobData={props.jobData}/>\n                </div>\n                )}\n        </div>)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutDataSelectionOverview} from \"../page_elements/Pages\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {\n    ICreateList,\n    IDataSelectionListPage,\n    IDsList,\n    ISendEvent,\n    ISetBufferIndexEvent,\n    ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {appName} from \"../../misc/config\";\n\nexport function EntitySelection(props: { parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, setBufferIndex: ISetBufferIndexEvent }) {\n    const pd: IDataSelectionListPage = {\n        pageTitle: \"Data selection - list\",\n        pageNavDs: true,\n        pageNavAl: false,\n        introductionText: \"The data selection contains the selections of datasets you will work with. They can be entities with filters on them.\",\n        dsList: createList(props.jobData)\n    }\n\n    function createList(jd: IJob): IDsList[] {\n        let retList: IDsList[] = [];\n        if (jd.entity_type_selections !== null) {\n            jd.entity_type_selections.map((item, index) => {\n                const buffer: IDsList = {\n                    dsName: item.label,\n                    dsDataset: item.description,\n                    dsProvider: \"\",\n                    dsIndex: index\n                }\n                retList.push(buffer);\n            });\n        }\n        return retList;\n    }\n\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName} projectName={props.jobData.job_title}/>\n            <HcLlLayoutDataSelectionOverview parentCallBack={props.parentCallBack} pageData={pd} jobData={props.jobData}\n                                             setJob={props.setJob} setBufferIndex={props.setBufferIndex}/>\n        </div>\n    );\n}","import React from 'react';\nimport {\n    HcLlListItemMinimal,\n    HcLlListItemMinimal2Fields,\n    HcLlListLabel,\n    HcLlSelectEntityFromList,\n    HcLlListItemDataSelection,\n    HcLlListItemAlignment,\n    HcResultListPaging,\n    HcLlListItemAlignmentLinks,\n    HcLlListItemAlignmentClusters\n} from './ListItems';\nimport {HcLlSubNavigation} from './Utils';\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    IDataSelectionDetailPage,\n    IDataSelectionListPage,\n    IModalSelectDatasetPage, ISendEvent,\n    ISetIndex, ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\n\n\nexport function HcLlLayoutDataSelectionOverview(props: {pageData: IDataSelectionListPage}) {\n\n    return (<React.Fragment>\n        <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs}\n                           isAl={props.pageData.pageNavAl}/>\n\n        <div className=\"hcContentContainer hcMarginBottom2\">\n            <div className=\"hcRowJustify\">\n                <div className=\"hcBasicSideMargin\">\n                    {props.pageData.introductionText}\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\">\n                        New data selection\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"hcContentContainer hcMarginBottom5\">\n            <div className=\"hcResultsHeader hcMarginBottom1 hcBasicSideMargin\">\n                <div>\n                    {/* labels */}\n                    <HcLlListLabel title=\"Data selections\"/>\n                </div>\n\n                <div>\n                    <select className=\"\" name=\"\">\n                        <option value=\"\">Order by name</option>\n                        <option value=\"\">Order by date updated</option>\n                        <option value=\"\">Order by date create</option>\n                    </select>\n                </div>\n            </div>\n\n            {/*<div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                 results\n                {props.pageData.dsList.map(item => (\n                    <HcLlListItemDataSelection idsList={item}/>))}\n\n            </div>*/}\n            {/* pagination */}\n            <HcResultListPaging/>\n        </div>\n    </ React.Fragment>);\n}\n\n\nexport function HcLlDataSelectionDetail(props: {pageData: IDataSelectionDetailPage}) {\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs}\n                               isAl={props.pageData.pageNavAl}/>\n\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info\">Info</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-dataset\">Dataset</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-filter\">Filter</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-sample\">Sample</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-relation\">Relation</div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info\">\n                            <h3>Name</h3>\n                            <input type=\"text\" name=\"name\" defaultValue=\"defaultValue\" className=\"hcMarginBottom2\"/>\n                            <h3>Description</h3>\n                            <textarea name=\"name\" rows={4} className=\"hcMarginBottom1\"/>\n                            <button type=\"button\" name=\"button\">\n                                Save research\n                            </button>\n                        </div>\n\n                        {/* tab: Dataset and entity */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-dataset\">\n                            <h3>Dataset and entity</h3>\n                            <div>\n                                <div className=\"hc2columns hcMarginBottom2\">\n                                    <div>\n                                        <div className=\"hcLabel\">dataset</div>\n                                        Enriched version of the Index op ondertrouwregisters\n                                        <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                                            Enriched version of the Index op ondertrouwregisters. Enrichment by Golden\n                                            Agents.\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <div className=\"hcLabel\">entity</div>\n                                        saa_Person\n                                    </div>\n                                </div>\n                                <button type=\"button\" name=\"button\">\n                                    Select data\n                                </button>\n                            </div>\n\n                        </div>\n\n                        {/* tab: Filter */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-filter\">\n                            <h3>Filter</h3>\n\n\n                        </div>\n\n                        {/* tab: Sample */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-sample\">\n                            <h3>Sample</h3>\n                            <div className=\"hc2columns\">\n                                <div>Only use a sample of this amount of records (-1 is no limit)</div>\n                                <div><input type=\"number\" value=\"-1\"/></div>\n                            </div>\n                        </div>\n\n                        {/* tab: Relation */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-relation\">\n                            <h3>Relation</h3>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlSelectDataset(props: {pageData: IModalSelectDatasetPage, parentCallback: ISetIndex, jobData: IJob, switchState:ISendEvent, setJob: ISetJobEvent}) {\n\n    return (\n        <React.Fragment>\n            <div className=\" hc2columns\">\n                <div className=\"hcList hcMarginBottom4 hcBasicSideMargin hcMaxhalf\">\n                    {props.pageData.datasetList.map(item => (\n                        <HcLlListItemMinimal2Fields fields={item} setIndex={props.pageData.setIndex} parentCallback= {props.parentCallback} />))}\n\n                </div>\n                <div className=\"hcBasicSideMargin hcClrBg_Grey05 hcleftMark\">\n                    <div className=\"hcMarginTop2\">\n                        <strong>\n                            {props.pageData.detailInfoName}\n                        </strong>\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                        {props.pageData.detailInfoProvider}\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey hcMarginBottom1\">\n                        {props.pageData.detailInfodescription}\n                    </div>\n                    <div className=\"hcLabel\">Entity</div>\n                    <div className=\"hcList \">\n                        {props.pageData.detailInfoEntities.map(item => (\n                            <HcLlSelectEntityFromList title={item.field} setIndex={props.pageData.setIndex} jobData={props.jobData} switchState={props.switchState} setJob={props.setJob}/>))}\n                    </div>\n                </div>\n            </div>\n\n\n        </ React.Fragment>);\n}\n","import React from 'react';\nimport {assign, Machine} from \"xstate\";\nimport {useState, useEffect} from \"react\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcModal} from \"../page_elements/Utils\"\nimport {HcLlDataSelectionDetail} from \"../page_elements/PagesDataSelection\";\nimport {HcLlSelectDataset} from \"../page_elements/PagesDataSelection\";\nimport {\n    ISendEvent,\n    IModalSelectDatasetPage,\n    ISingleList,\n    IDoubleList,\n    IDataSet,\n    IDataSets,\n    ISetIndex, ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {API_LOCATION, appName, GOLDEN_AGENTS_REPOSITORY} from \"../../misc/config\";\n\nexport function PickDataSets(props: { parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, hsid: string | null }) {\n    const [loading, setLoading] = useState(true);\n    const [refreshToggle, setRefreshToggle] = useState(true);\n    const url = API_LOCATION + GOLDEN_AGENTS_REPOSITORY;\n    let options: any = {}\n    if (props.hsid !== null) {\n        options = {\n            headers: {\n                authorization: props.hsid\n            }\n        }\n    }\n\n    let pd: IModalSelectDatasetPage = {\n        pageTitle: \"Modal select dataset\",\n        pageNavDs: true,\n        pageNavAl: false,\n        datasetList: [],\n        detailInfoEntities: [],\n        detailInfoName: \"\",\n        detailInfoProvider: \"\",\n        detailInfodescription: \"\",\n        setIndex: \"\"\n    }\n\n    const [pageData, setPageData] = useState<IModalSelectDatasetPage>(pd);\n    const [dataSets, setDataSets] = useState<IDataSets | any>();\n\n    async function fetchDataSets() {\n        console.log(url);\n        const response = await fetch(url, options);\n        const json = await response.json();\n        const obj = Object.keys(json);\n        const g: string = obj[0].toString();\n        pd.setIndex = g;\n        pd.datasetList = setDataSetList(json);\n        pd.detailInfoEntities = setDetailInfoEntities(json, g);\n        pd.detailInfoName = json[g].title;\n        setPageData(pd);\n        setDataSets(json);\n        setLoading(false);\n    }\n\n    const setIndex: ISetIndex = (index: string) => {\n        let pd:IModalSelectDatasetPage = pageData;\n        pd.detailInfoEntities = setDetailInfoEntities(dataSets, index);\n        pd.detailInfoName = dataSets[index].title;\n        pd.setIndex = index;\n        setPageData(pd);\n        setRefreshToggle((!refreshToggle));\n    }\n\n    function setDataSetList(json: any):IDoubleList[] {\n        let retList: IDoubleList[] = [];\n        const obj = Object.keys(json);\n        obj.map((item) => {\n            const list: IDoubleList = {\n                field1: json[item].title,\n                field2: json[item].description,\n                key: item\n            };\n            retList.push(list);\n        });\n        return retList;\n    }\n\n    function setDetailInfoEntities(json: any, index: string):ISingleList[] {\n        let retList: ISingleList[] = [];\n        const obj = Object.keys(json);\n        const entities = Object.keys(json[index].collections);\n        entities.map((item) => {\n            const list: ISingleList = {\n                field: item\n            }\n            retList.push(list);\n        });\n        return retList;\n    }\n\n    useEffect(() => {\n        fetchDataSets();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName={props.jobData.job_title}/>\n            {!loading ? (<HcModal parentCallBack={props.parentCallBack} modalName='Select dataset'>\n                    <HcLlSelectDataset pageData={pageData} parentCallback={setIndex} jobData={props.jobData} switchState={props.parentCallBack} setJob={props.setJob}/>\n                </HcModal>) :\n                (<div className=\"loadClass\">Loading...</div>)}\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/huc-connect-sets.css';\nimport './css/huc-data-entry.css';\nimport './css/huc-search.css';\nimport './css/GoldenAgents.css';\nimport ResearchPick from \"./components/pages/ResearchPick\";\nimport {DataSetDetail} from \"./components/pages/dataSetDetail\";\nimport {StateMachineComponent} from './renderMachine';\nimport {lenseMachine} from \"./machines/LenseMachine\";\nimport {NewProject} from \"./components/pages/newProject\";\nimport {EditProjectBasics} from \"./components/pages/editProjectBasics\";\nimport {interpret} from \"xstate\";\nimport {\n    ISendEvent,\n    ISetBufferIndex,\n    ISetBufferIndexEvent,\n    ISetJob,\n    ISetJobEvent,\n    ISetValue,\n    ISetValueEvent\n} from \"./misc/interfaces\";\nimport * as serviceWorker from './serviceWorker';\nimport {EntitySelection} from \"./components/pages/EntitySelection\";\nimport {PickDataSets} from \"./components/pages/PickDataSets\";\n\n\nconst interpreter = interpret(lenseMachine);\ninterpreter.start();\n\nconst switchState: ISendEvent = (name: string) => {\n    interpreter.send(name);\n}\n\nconst setContextValue: ISetValueEvent = (struc:ISetValue) => {\n    interpreter.send(struc);\n}\n\nconst setContextJob: ISetJobEvent = (struc:ISetJob) => {\n    interpreter.send(struc);\n}\n\nconst setContextIndex: ISetBufferIndexEvent = (struc: ISetBufferIndex) => {\n    interpreter.send(struc);\n}\n\nconst qs: URLSearchParams = new URLSearchParams(window.location.search);\nconst qsJobID: string | null = qs.get(\"job_id\");\nconst qsHSID: string | null = qs.get(\"hsid\");\n\nReactDOM.render(\n    <div>\n        {StateMachineComponent(interpreter,\n            {\n                \"research\": ({state}) => <ResearchPick parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData} qsJobID={qsJobID}/>,\n                \"create\": ({state}) => <NewProject  parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData}/>,\n                \"fetch\": ({state}) => <EditProjectBasics parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData}/>,\n                \"entity\": ({state}) => <EntitySelection parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob} setBufferIndex={setContextIndex}/>,\n                \"datasets\" : ({state}) => <PickDataSets parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob}  hsid={qsHSID}/>,\n                \"dataset_detail\" : ({state}) => <DataSetDetail parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob} dsIndex={state.context.bufferedIndex}/>,\n                \"\": ({state}) => <div>The GUI for {state.value} is not yet defined</div>\n            })}\n    </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}