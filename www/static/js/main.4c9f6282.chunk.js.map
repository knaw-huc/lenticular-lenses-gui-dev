{"version":3,"sources":["images/logo-ga.png","images/ga-ll-tempNetwork.svg","components/page_elements/GoldenAgents.tsx","misc/config.tsx","components/page_elements/ListItems.tsx","components/page_elements/Utils.tsx","components/page_elements/Pages.tsx","misc/functions.tsx","components/pages/ResearchPick.tsx","components/pages/dataSetDetail.tsx","renderMachine.tsx","machines/LenseMachine.tsx","components/pages/newProject.tsx","components/pages/editProjectBasics.tsx","components/page_elements/PagesAlignments.tsx","components/pages/alignments.tsx","serviceWorker.ts","components/pages/EntitySelection.tsx","components/page_elements/PagesDataSelection.tsx","components/pages/PickDataSets.tsx","index.tsx"],"names":["module","exports","HcHeaderGoldenAgents","props","className","src","logoGa","alt","toolName","projectName","HclLIconDataSelection","React","Component","HclLIconAlignment","appName","APP_HOME","API_LOCATION","AUTH_SERVER","HcLlSelectEntityFromList","formData","entity_type_selections","jobData","job_description","job_id","job_link","job_title","lens_specs","linkset_specs","data","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","result","sj","type","value","setJob","switchState","console","log","onClick","dsIndex","dataset","dataset_id","setIndex","collection_id","title","sendJob","HcLlListItemMinimal2Fields","klasse","fields","key","parentCallback","field1","field2","HcLlListLabel","HcLlListItemDataSelection","job","update_data","struc","reload","index","setBufferIndex","parentCallBack","loadPage","idsList","dsName","dsDataset","dsProvider","alert","currentDataSet","parse","push","duplicate","splice","remove","HcLlListItemAlignment","prName","prSource","prTarget","prLinks","prCusters","prStatus","href","HcResultListPaging","HcLlSubNavigation","pageTitle","goTo","isDs","isAl","HcModal","modalName","children","HcLlLayoutHome","projectID","qsJobID","useState","error","setError","url","setValue","jobStruc","name","form","document","createElement","action","innerHTML","window","location","style","display","appendChild","submit","doLogin","onChange","e","currentTarget","defaultValue","getProject","HcLlLayoutProjectDetail","nw","jobID","newJob","handleChange","sendData","sendNew","sendUpdate","updateValues","undefined","HcLlLayoutDataSelectionOverview","refresh","setRefresh","length","newDataSelection","dataSet","published","timbuctoo_graphql","timbuctoo_hsid","id","label","description","filter","conditions","property","limit","properties","random","related","related_array","unshift","Fragment","pageData","pageNavAl","pageNavDs","dsList","map","item","HcLlDataSelectionDetail","tab","setTab","placeholder","rows","collection","ResearchPick","qsID","DataSetDetail","pd","isFunctionComponent","val","lenseMachine","Machine","initial","context","created_at","updated_at","bufferedIndex","on","research","entity","create","datasets","dataset_detail","alignments","states","idle","NEW","ENTITY","SET_ID","actions","assign","event","SET_JOB","RESEARCH","target","FETCH","DATASETS","DATASET_DETAIL","ALIGNMENTS","SET_INDEX","NewProject","EditProjectBasics","loading","setLoading","useEffect","require","HcLlLayoutAlignmentOverview","introductionText","alignmentList","Alignments","Boolean","hostname","match","EntitySelection","jd","retList","buffer","createList","HcLlSelectDataset","datasetList","detailInfoName","detailInfoProvider","detailInfodescription","detailInfoEntities","field","PickDataSets","refreshToggle","setRefreshToggle","options","hsid","authorization","setPageData","dataSets","setDataSets","obj","Object","keys","g","toString","setDataSetList","setDetailInfoEntities","list","collections","fetchDataSets","interpreter","interpret","start","screens","send","setContextValue","setContextJob","setContextIndex","qs","URLSearchParams","search","get","qsHSID","ReactDOM","render","state","curState","setState","cb","onTransition","off","view","pickReactComponents","config","configVal","getFirstReactComponent","singleResult","count","subResult","merger","input","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4c9f6282.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-ga.69311753.png\";","module.exports = __webpack_public_path__ + \"static/media/ga-ll-tempNetwork.a5f7fb5b.svg\";","import React from 'react';\nimport logoGa from \"../../images/logo-ga.png\";\n\n\n\nexport function HcHeaderGoldenAgents(props: {toolName: string, projectName: string}) {\n        return (\n            <div className=\"hcGaHeader hcMarginBottom4 bgColorBrand1\">\n                <div className=\"hcGaHeaderLogo\">\n                    <img\n                        src={logoGa}\n                        alt=\"Golden Agents logo\" />\n                </div>\n                <div className=\"hcGaHeaderToolName\">\n                    {props.toolName}\n                </div>\n                <div className=\"hcGaHeaderProject\">\n                    {props.projectName}\n                </div>\n                <div className=\"hcGaHeaderHelp\" />\n            </div>\n\n        );\n}\n\n\n\nexport class HclLIconDataSelection extends React.Component {\n    render() {\n        return (\n            <div className=\"hc-ga-icon hc-ga-icon-ds hcRoundedCorners\"/>\n\n        );\n    }\n}\n\n\nexport class HclLIconAlignment extends React.Component {\n    render() {\n        return (\n            <div className=\"hc-ga-icon hc-ga-icon-al hcRoundedCorners\"> </div>\n\n        );\n    }\n}\n","export const appName = \"Lenticular Lenses\";\n//export const APP_HOME = \"http://localhost:3000/\";\nexport const APP_HOME = \"https://lensgui.sd.di.huc.knaw.nl\";\n//export const API_LOCATION = \"\";\nexport const API_LOCATION = \"https://recon.diginfra.net\";\nexport const GOLDEN_AGENTS_REPOSITORY = \"/datasets?endpoint=https://repository.goldenagents.org/v5/graphql\";\nexport const AUTH_SERVER = \"https://secure.huygens.knaw.nl/saml2/login\";","import React from 'react';\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    AlignmentLinkComparePage,\n    IAlignmentList, IClusterList,\n    IDoubleList,\n    IDsList,\n    ILinkList, IReloadDatasets, ISendEvent, ISetIndex, ISetBufferIndex, ISetBufferIndexEvent, ISetJob, ISetJobEvent,\n    ITripleList\n} from \"../../misc/interfaces\";\nimport {IJob, IJobDataSet, ILensSpecs, ILinkSetSpecs} from \"../../misc/apiInterfaces\";\nimport {defaultIJobDataSet} from \"../../misc/functions\";\nimport {API_LOCATION} from \"../../misc/config\";\n\n\nexport function HcLlListItemMinimal(props: { title: string }) {\n\n    return (\n        <div className=\"hcEntityName\">\n            {props.title}\n        </div>\n\n\n    );\n}\n\nexport function HcLlSelectEntityFromList(props: { title: string, setIndex: string, jobData: IJob, switchState: ISendEvent, setJob: ISetJobEvent, dsIndex: number }) {\n    let formData: IJob = {\n        entity_type_selections: props.jobData.entity_type_selections,\n        job_description: props.jobData.job_description,\n        job_id: props.jobData.job_id,\n        job_link: props.jobData.job_link,\n        job_title: props.jobData.job_title,\n        lens_specs: props.jobData.lens_specs,\n        linkset_specs: props.jobData.linkset_specs\n    }\n\n    async function sendJob(data: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(formData)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            const sj: ISetJob = {\n                type: \"SET_JOB\",\n                value: formData\n            }\n            props.setJob(sj);\n            props.switchState(\"DATASET_DETAIL\");\n        } else {\n            console.log(json);\n        }\n    }\n\n    return (\n        <div className=\"hcEntityName\" onClick={() => {\n            formData.entity_type_selections[props.dsIndex].dataset.dataset_id = props.setIndex;\n            formData.entity_type_selections[props.dsIndex].dataset.collection_id = props.title;\n            sendJob(formData);\n        }}>\n            {props.title}\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemMinimal2Fields(props: { fields: IDoubleList, setIndex: string, parentCallback: ISetIndex }) {\n    const active: boolean = props.fields.key == props.setIndex;\n    let klasse: string = \"\";\n    if (active) {\n        klasse = \"hcAlignVerticalActive hcIsLink\";\n    } else {\n        klasse = \"hcAlignVertical hcIsLink\";\n    }\n\n\n    return (\n        <div className={klasse} onClick={() => props.parentCallback(props.fields.key)}>\n            <div>\n                {props.fields.field1}\n                <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                    {props.fields.field2}\n                </div>\n            </div>\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListLabel(props: { title: string }) {\n\n    return (\n        <div className=\"hcLabel\">\n            {props.title}\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemDataSelection(props: { parentCallBack: ISendEvent, idsList: IDsList, jobData:IJob, setJob: ISetJobEvent, reload: IReloadDatasets, setBufferIndex: ISetBufferIndexEvent }) {\n    function duplicate(index: number): void {\n        let job = props.jobData;\n        const buffer = JSON.parse(JSON.stringify(job.entity_type_selections));\n        let currentDataSet: IJobDataSet = buffer[index];\n        job.entity_type_selections.push(currentDataSet);\n        sendJob(job);\n    }\n\n    function remove(index: number): void {\n        let job = props.jobData;\n        job.entity_type_selections.splice(index, 1);\n        sendJob(job);\n    }\n\n    async function sendJob(job: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(job)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            update_data(job);\n        } else {\n            console.log(json);\n        }\n    }\n\n    function update_data(job: IJob) {\n        const struc:ISetJob = {\n            type: \"SET_JOB\",\n            value: job\n        }\n        props.setJob(struc);\n        props.reload();\n    }\n\n    function loadPage(index: number): void {\n        const struc: ISetBufferIndex = {\n            type: \"SET_INDEX\",\n            value: index\n        };\n        props.setBufferIndex(struc);\n        props.parentCallBack(\"DATASET_DETAIL\");\n    }\n\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\" onClick={() => {loadPage(props.idsList.dsIndex)}}>\n                <strong><HclLIconDataSelection/> {props.idsList.dsName}</strong>\n                <div className=\"hcSmallTxt\">\n                    {props.idsList.dsDataset}\n                </div>\n                <div className=\"hcSmallTxt\">\n                    {props.idsList.dsProvider}\n                </div>\n            </div>\n            <div className=\"hcListActionItem\" onClick={() => {alert(\"No samples available.\");}}>Show sample</div>\n            <div className=\"hcListActionItem\" onClick={() => {duplicate(props.idsList.dsIndex)}}>Duplicate</div>\n            <div className=\"hcListActionItem\" onClick={() => {remove(props.idsList.dsIndex)}}>Delete</div>\n        </div>\n    );\n}\n\n\nexport function HcLlListItemAlignment(props: IAlignmentList) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\">\n                <strong> <HclLIconAlignment/>{props.prName}</strong>\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prSource}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prSource}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prTarget}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prLinks}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prCusters}\n            </div>\n            <div className=\"hcSmallTxt hcTxtRight\">\n                {props.prStatus}\n            </div>\n            <div><a href=\"\">Duplicate</a></div>\n        </div>\n\n\n    );\n}\n\n\nexport function HcLlListItemAlignmentLinks(props: { links: ILinkList }) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcListItemLong\">{props.links.strength}</div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/></div>\n                <strong></strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey hcTextTruncate\"></div>\n            </div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/></div>\n                <strong></strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey hcTextTruncate\"></div>\n            </div>\n            <div className=\"hcListItemLong\">\n                <button type=\"button\" name=\"button\">Compare</button>\n                <button className=\"bgColorBrand2\">Accept</button>\n                <button className=\"hcClrBg_Error\">Decline</button>\n            </div>\n        </div>\n    );\n\n}\n\n\nexport function HcLlListItemAlignmentClusters(props: { cluster: IClusterList }) {\n\n    return (\n        <div className=\"hcListBasicResult\">\n            <div className=\"hcSmallTxt\">391</div>\n            <div className=\"hcSmallTxt\">73.642</div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/> foaf_name</div>\n                <strong>Mary Jans</strong>\n            </div>\n            <div className=\"hcListItemLong\">\n                <div className=\"hcLabel\"><HclLIconDataSelection/> Schema_Name</div>\n                <strong>Brugge-Antwerpen</strong>\n            </div>\n            <div className=\"hcSmallTxt hcTxtCenter\"> x</div>\n            <div className=\"hcSmallTxt hcTxtCenter\"> x</div>\n            <div className=\"hcSmallTxt\"> 2345234542</div>\n        </div>\n    );\n}\n\n\nexport function HcLlListItemAlignmentClusterViewItem(props: ITripleList) {\n\n    return (\n        <div>\n            <div>\n                <div>{props.field1}</div>\n                <strong>{props.field2}</strong>\n                <div className=\"hcSmallTxt hcClrTxt_Grey\">{props.field3}</div>\n            </div>\n        </div>\n\n    );\n}\n\n\nexport function HcResultListPaging() {\n\n    return (\n        <div className=\"hcPagination\">\n            {/*<div><a href=\"#\">← Previous</a></div>\n            <div><a href=\"#\">1</a></div>\n            <div className=\"bgColorBrand2\"><a href=\"#\">2</a></div>\n            <div><a href=\"#\">3</a></div>\n            <div><a href=\"#\">4</a></div>\n            <div><a href=\"#\">5</a></div>\n            <div><a href=\"#\">6</a></div>\n            <div><a href=\"#\">Next →</a></div>*/}\n        </div>\n    );\n}\n","import React from 'react';\nimport {ISendEvent} from \"../../misc/interfaces\";\n\nexport function HcLlSubNavigation(props: { pageTitle: string, isDs: boolean, isAl: boolean, goTo: ISendEvent }) {\n    return (\n        <div className=\"hcContentContainer hcMarginBottom4\">\n            <div className=\"hcRowJustifyTop\">\n                <div className=\"hcBasicSideMargin\">\n                    <h3>{props.pageTitle}</h3>\n                </div>\n                <div className=\"hcBasicSideMargin hcAlignRight hcGaTabsLoudness1\">\n                    <div className=\"hcTopMenu\" onClick={() => {props.goTo(\"FETCH\")}}>Edit research</div>\n                    <div className={(props.isDs ? 'hcSelected' : 'hcTopMenu')} onClick={() => props.goTo(\"ENTITY\")}>Data Selection</div>\n                    <div className={(props.isAl ? 'hcSelected' : 'hcTopMenu')} onClick={() => props.goTo(\"ALIGNMENTS\")}>Alignment</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport function HcModal(props: { parentCallBack: ISendEvent, modalName: string, children: object }) {\n    return (\n        <div className=\"hcModal\">\n            <div className=\"hcContentContainer\">\n                <div className=\"hcModelContentWrap\">\n\n                    <div className=\"hcBasicSideMargin hc2columns hcMarginBottom2 hcMarginTop2\">\n                        <h3>{props.modalName}</h3>\n                        <div className=\"hcTxtRight hcIsLink\" onClick={() => props.parentCallBack(\"ENTITY\")}>Close</div>\n                    </div>\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport function HcLlCompareItem(props: { label: string, content: string }) {\n    return (\n        <React.Fragment>\n            <div>\n                <div className=\"hcLabel\">{props.label}</div>\n                <div className=\"hcMarginBottom1 hcSmallTxt\">{props.content}</div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\nexport function HcLlAlignmantInfoBar(props: { infoSources: number, infoTargets: number, infoLinks: number, infoClusters: number }) {\n    return (\n        <div className=\"hcContentContainer hcMarginBottom3\">\n            <div className=\"hcRowJustify hcStickOutBox hcRoundedCorners\">\n                <div className=\"hc4columns\">\n                    <div className=\"hcBasicSideMargin\">\n                        Sources: <strong>{props.infoSources}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Targets: <strong>{props.infoTargets}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Links <strong>{props.infoLinks}</strong>\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        Clusters: <strong>{props.infoClusters}</strong>\n                    </div>\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\">Reconcile</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport {\n    HcLlListItemMinimal,\n    HcLlListItemMinimal2Fields,\n    HcLlListLabel,\n    HcLlListItemDataSelection,\n    HcLlListItemAlignment,\n    HcResultListPaging,\n    HcLlListItemAlignmentLinks,\n    HcLlListItemAlignmentClusters,\n} from './ListItems';\nimport {HcLlSubNavigation} from './Utils';\nimport {useState} from \"react\";\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    IHomePage,\n    IDataSelectionListPage,\n    IModalSelectDatasetPage,\n    IAlignmentListPage,\n    IAlignmentDetailPage,\n    ISendEvent,\n    ISetValueEvent,\n    ISetValue,\n    ISetJobEvent,\n    ISetIndex,\n    ISetBufferIndex,\n    IReloadDatasets,\n    ISetBufferIndexEvent,\n    IDataSelectionDetailPage, IDataSetDetailForm, ISetJob\n} from \"../../misc/interfaces\";\nimport {IJob, IJobBasic, IJobDataSet, ILensSpecs, ILinkSetSpecs, IUpdateJob} from \"../../misc/apiInterfaces\";\nimport {API_LOCATION, APP_HOME, AUTH_SERVER} from \"../../misc/config\";\nimport {defaultIJobDataSet} from \"../../misc/functions\";\n\nexport function HcLlLayoutHome(props: { pageData: IHomePage, parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob: ISetJobEvent, jobID: string, qsJobID: string }) {\n    let projectID: string = props.qsJobID;\n    const [error, setError] = useState(\"\");\n\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>) {\n        projectID = e.currentTarget.value;\n    }\n\n    function submit() {\n        if (projectID === \"\") {\n            setError(\"No research ID given!\");\n        } else {\n            getProject();\n        }\n    }\n\n    function doLogin() {\n        const form = document.createElement('form');\n        form.action = AUTH_SERVER;\n        form.method = 'POST';\n        form.innerHTML = `<input name=\"hsurl\" value=${window.location} type=\"hidden\" />`;\n        form.style.display = 'none';\n        document.body.appendChild(form);\n        form.submit();\n    }\n\n    async function getProject() {\n        const url = API_LOCATION + \"/job/\" + projectID;\n        try {\n            const response = await fetch(url);\n            const json: IJob = await response.json();\n            const struc: ISetValue = {type: \"SET_ID\", value: json.job_id};\n            props.setValue(struc);\n            const jobStruc: ISetJob = {type: \"SET_JOB\", value: json};\n            props.setJob(jobStruc);\n            props.parentCallBack(\"ENTITY\");\n        } catch (err) {\n            setError(\"Job not found! Try again with a correct job ID.\");\n        }\n    }\n\n    return (<div className=\"hcContentContainer hcMarginBottom4 hcMarginTop5\">\n        <div className=\"hc2columns\">\n\n            {/* left column */}\n            <div className=\"hcMarginBottom2 hcBasicSideMargin\">\n                <h2>\n                    New research\n                </h2>\n                Start a new research to reconcile one or more datasets.\n                <br/>\n                <br/>\n                <button type=\"button\" name=\"button\" onClick={() => props.parentCallBack(\"NEW\")}>\n                    New research\n                </button>\n                <div className=\"hcLoginArea\">\n                    <h2>Login</h2>\n                    Login to get access to private datasets.\n                    <button type=\"button\" name=\"loginButton\" className=\"loginBtn\" onClick={() => {\n                        doLogin()\n                    }}>\n                        Login\n                    </button>\n                </div>\n            </div>\n\n            {/* right column */}\n            <div className=\"hcBasicSideMargin hcMarginBottom4\">\n                <h2>Existing research</h2>\n                <div>&nbsp;</div>\n                {/*<div className=\"hcList hcMarginBottom4\">\n                    {props.pageData.projectList.map(item => (<HcLlListItemMinimal title={item.prName}/>))}\n                </div>*/}\n                <div className=\"hcStickOutBox hcRoundedCorners\">\n                    <p className=\"hcMarginBottom1\">\n                        Enter your research ID:\n                    </p>\n                    <input type=\"text\" name=\"projectID\" onChange={handleChange} className=\"hcMarginBottom1\"\n                           defaultValue={props.qsJobID}/>\n                    <button type=\"button\" name=\"button\" onClick={submit}>\n                        Load research\n                    </button>\n                </div>\n            </div>\n            <div className=\"errorMsg\">{error}</div>\n        </div>\n    </div>);\n}\n\n\nexport function HcLlLayoutProjectDetail(props: { parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob: ISetJobEvent, jobID: string, jobData: IJob }) {\n    let formData: IJobBasic = {\n        job_title: props.jobData.job_title,\n        job_description: props.jobData.job_description,\n        job_link: props.jobData.job_link\n    };\n\n    let nw: boolean = false;\n\n    if (props.jobID === \"\") {\n        nw = true;\n    }\n\n    const [newJob, setNewJob] = useState<boolean>(nw);\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>): void {\n        switch (e.currentTarget.name) {\n            case \"job_title\":\n                formData.job_title = e.currentTarget.value;\n                break;\n            case \"job_link\":\n                formData.job_link = e.currentTarget.value;\n                break;\n        }\n    }\n\n    function handleTextChange(e: React.FormEvent<HTMLTextAreaElement>): void {\n        formData.job_description = e.currentTarget.value;\n    }\n\n    function sendData() {\n        if (newJob) {\n            sendNew();\n        } else {\n            sendUpdate();\n        }\n    }\n\n    async function sendNew() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(formData)\n        };\n        const response = await fetch(API_LOCATION + \"/job/create\", requestOptions);\n        const data = await response.json();\n        console.log(data);\n        if (data.result === \"created\") {\n            props.setValue({type: \"SET_ID\", value: data.job_id});\n        }\n        window.location.href = APP_HOME + \"?job_id=\" + data.job_id;\n        //props.parentCallBack(\"FETCH\");\n    }\n\n    async function sendUpdate() {\n        let updateValues: IUpdateJob = {\n            job_id: props.jobData.job_id,\n            job_title: formData.job_title,\n            job_description: formData.job_description,\n            job_link: formData.job_link\n        }\n\n\n        if (props.jobData.entity_type_selections !== null) {\n            updateValues.entity_type_selections = props.jobData.entity_type_selections;\n        }\n\n        if (props.jobData.lens_specs !== null) {\n            updateValues.lens_specs = props.jobData.lens_specs;\n        }\n\n        if (props.jobData.linkset_specs !== null) {\n            updateValues.linkset_specs = props.jobData.linkset_specs;\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(updateValues)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        console.log(response);\n        const data = await response.json();\n        if (data.result !== undefined && data.result === \"updated\") {\n            props.setValue({type: \"SET_ID\", value: data.job_id});\n        }\n\n    }\n\n\n    return (<div className=\"hcContentContainer hcMarginBottom4 hcMarginTop5\">\n        <form className=\"hc2columns\">\n\n            {/* left column */}\n            <div className=\"hcMarginBottom2 hcBasicSideMargin hcForm\">\n                <h3>Research name</h3>\n                <input type=\"text\" name=\"job_title\" defaultValue={formData.job_title} onChange={handleChange}\n                       className=\"hcMarginBottom2\"/>\n\n                <h3>Research description</h3>\n                <textarea className=\"hcMarginBottom1\" name=\"job_description\"\n                          defaultValue={formData.job_description} onChange={handleTextChange}>\n\n                </textarea>\n\n                <h3>Research link</h3>\n                <input type=\"text\" name=\"job_link\" defaultValue={formData.job_link} onChange={handleChange}\n                       className=\"hcMarginBottom2\"/>\n                <button type=\"button\" onClick={() => props.parentCallBack(\"RESEARCH\")}>Back</button>\n                <button type=\"button\" onClick={() => sendData()}>Save research</button>\n                {!newJob ? (\n                    <button type=\"button\" onClick={() => props.parentCallBack(\"ENTITY\")}>Next</button>\n                ) : (<div/>)}\n            </div>\n\n            {/* right column */}\n            <div className=\"hcBasicSideMargin hcMarginBottom4\"></div>\n        </form>\n    </div>);\n\n}\n\n\nexport function HcLlLayoutDataSelectionOverview(props: { parentCallBack: ISendEvent, pageData: IDataSelectionListPage, jobData: IJob, setJob: ISetJobEvent, setBufferIndex: ISetBufferIndexEvent }) {\n    const [refresh, setRefresh] = useState(true);\n\n    const reload: IReloadDatasets = () => {\n        setRefresh(!refresh);\n    }\n\n    let formData: IJob = {\n        entity_type_selections: props.jobData.entity_type_selections,\n        job_description: props.jobData.job_description,\n        job_id: props.jobData.job_id,\n        job_link: props.jobData.job_link,\n        job_title: props.jobData.job_title,\n        lens_specs: props.jobData.lens_specs,\n        linkset_specs: props.jobData.linkset_specs\n    }\n\n    async function sendJob(data: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(formData)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            const sj: ISetJob = {\n                type: \"SET_JOB\",\n                value: formData\n            }\n            props.setJob(sj);\n\n            const index: number = formData.entity_type_selections.length - 1;\n            const struc: ISetBufferIndex = {\n                type: \"SET_INDEX\",\n                value: 0\n            };\n            props.setBufferIndex(struc);\n            //console.log(formData.entity_type_selections.length);\n            props.parentCallBack(\"DATASET_DETAIL\");\n        } else {\n            console.log(json);\n        }\n    }\n\n    function newDataSelection() {\n        const dataSet: IJobDataSet = defaultIJobDataSet();\n        if (formData.entity_type_selections == null) {\n            formData.entity_type_selections = [];\n        }\n        if (formData.lens_specs == null) {\n            formData.lens_specs = [];\n        }\n        if (formData.linkset_specs == null) {\n            formData.linkset_specs = [];\n        }\n        dataSet.id = formData.entity_type_selections.length;\n        formData.entity_type_selections.unshift(dataSet);\n        sendJob(formData);\n    }\n\n    return (<React.Fragment>\n        <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                           isDs={props.pageData.pageNavDs} goTo = {props.parentCallBack} />\n\n        <div className=\"hcContentContainer hcMarginBottom2\">\n            <div className=\"hcRowJustify\">\n                <div className=\"hcBasicSideMargin\">\n                    The data selection contains the selections of datasets you will work with.\n                    <br/>They can be entities with filters on them.\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\" onClick={() => newDataSelection()}>\n                        New data selection\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"hcContentContainer hcMarginBottom5\">\n            <div className=\"hcResultsHeader hcMarginBottom1 hcBasicSideMargin\">\n                <div>\n                    {/* labels */}\n                    <HcLlListLabel title=\"Data selections\"/>\n                </div>\n\n                {/*<div>\n                    <select className=\"\" name=\"\">\n                        <option value=\"\">Order by name</option>\n                        <option value=\"\">Order by date updated</option>\n                        <option value=\"\">Order by date create</option>\n                    </select>\n                </div>*/}\n            </div>\n\n            <div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                {/* results */}\n                {props.pageData.dsList.map(item => (\n                    <HcLlListItemDataSelection parentCallBack={props.parentCallBack} idsList={item}\n                                               jobData={props.jobData} setJob={props.setJob} reload={reload}\n                                               setBufferIndex={props.setBufferIndex}/>))}\n            </div>\n            {/* pagination */}\n            <HcResultListPaging/>\n        </div>\n    </ React.Fragment>);\n}\n\n\nexport function HcLlDataSelectionDetail(props: { pageData: IDataSelectionDetailPage, parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, dsIndex: number }) {\n    const [tab, setTab] = useState(\"info\");\n    const formData: IDataSetDetailForm = {\n        label: props.pageData.pageTitle,\n        description: props.pageData.description\n    }\n\n    function change(item: string) {\n        setTab(item);\n    }\n\n    function submit() {\n        let job = props.jobData;\n        job.entity_type_selections[props.dsIndex].label = formData.label;\n        job.entity_type_selections[props.dsIndex].description = formData.description;\n        sendJob(job);\n    }\n\n    async function sendJob(job: IJob) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(job)\n        };\n        const response = await fetch(API_LOCATION + \"/job/update\", requestOptions);\n        const json: any = await response.json();\n\n        if (json.result === \"updated\") {\n            update_data(job);\n        } else {\n            console.log(json);\n        }\n    }\n\n    function selectEntity() {\n        props.parentCallBack(\"DATASETS\");\n    }\n\n    function update_data(job: IJob) {\n        const struc: ISetJob = {\n            type: \"SET_JOB\",\n            value: job\n        }\n        props.setJob(struc);\n        props.parentCallBack(\"ENTITY\");\n    }\n\n    function handleChange(e: React.FormEvent<HTMLInputElement>): void {\n        switch (e.currentTarget.name) {\n            case \"label\":\n                formData.label = e.currentTarget.value;\n                break;\n        }\n    }\n\n    function handleTextChange(e: React.FormEvent<HTMLTextAreaElement>): void {\n        formData.description = e.currentTarget.value;\n    }\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs} goTo={props.parentCallBack}/>\n            {/*<div className=\"hcContentContainer hcMarginBottom3\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        <h3><HclLIconDataSelection/>\n                            {props.pageData.pageTitle}</h3>\n                    </div>\n                </div>\n            </div>*/}\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info\"\n                             onClick={() => setTab(\"info\")}>Info\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-dataset\"\n                             onClick={() => setTab(\"set\")}>Dataset\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-filter\"\n                             onClick={() => setTab(\"filter\")}>Filter\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-sample\"\n                             onClick={() => setTab(\"sample\")}>Sample\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-relation\"\n                             onClick={() => setTab(\"relation\")}>Relation\n                        </div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        {tab === \"info\" ? (\n                            <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info\">\n                                <h3>Label</h3>\n                                <input type=\"text\" name=\"label\" defaultValue={props.pageData.pageTitle} placeholder=\"Type name of your selection\"\n                                       className=\"hcMarginBottom2\" onChange={handleChange}/>\n                                <h3>Description</h3>\n                                <textarea name=\"description\" rows={4} defaultValue={props.pageData.description} placeholder=\"Add your description\"\n                                          className=\"hcMarginBottom1\" onChange={handleTextChange}/><br/>\n                                <button type=\"button\" name=\"button\" onClick={() => submit()}>\n                                    Save research\n                                </button>\n                                <button type=\"button\" name=\"back\" onClick={() => {\n                                    props.parentCallBack(\"ENTITY\")\n                                }}>\n                                    Back\n                                </button>\n                            </div>) : (<div/>)\n                        }\n                        {/* tab: Dataset and entity */}\n                        {tab === \"set\" ? (\n                            <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-dataset\">\n                                <h3>Dataset and entity</h3>\n                                <div>\n                                    <div className=\"hc2columns hcMarginBottom2\">\n                                        <div>\n                                            <div className=\"hcLabel\">dataset</div>\n                                            {props.pageData.dataset}\n                                            {/*<div className=\"hcSmallTxt hcClrTxt_Grey\">\n                                            Enriched version of the Index op ondertrouwregisters. Enrichment by\n                                            Golden Agents.\n                                        </div>*/}\n                                        </div>\n                                        <div>\n                                            <div className=\"hcLabel\">entity</div>\n                                            {props.pageData.collection}\n                                        </div>\n                                    </div>\n                                    <button type=\"button\" name=\"button\" onClick={() => {selectEntity();}}>\n                                        Select data\n                                    </button>\n                                </div>\n\n                            </div>) : (<div/>)\n                        }\n\n                        {/* tab: Filter */}\n                        {tab === \"filter\" ? (\n                            <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-filter\">\n                                <h3>Filter</h3>\n\n\n                            </div>) : (<div/>)\n                        }\n\n                        {/* tab: Sample */}\n                        {tab === \"sample\" ? (\n                            <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-sample\">\n                                <h3>Sample</h3>\n                                <div className=\"hc2columns\">\n                                    <div>Only use a sample of this amount of records (-1 is no limit)</div>\n                                    <div><input type=\"number\" value=\"-1\"/></div>\n                                </div>\n                            </div>) : (<div/>)\n                        }\n\n                        {/* tab: Relation */}\n                        {tab === \"relation\" ? (\n                            <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-relation\">\n                                <h3>Relation</h3>\n                            </div>) : (<div/>)\n                        }\n\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlSelectDataset(props: { pageData: IModalSelectDatasetPage, parentCallback: ISetIndex }) {\n\n    return (\n        <React.Fragment>\n            <div className=\" hc2columns\">\n                <div className=\"hcList hcMarginBottom4 hcBasicSideMargin hcMaxhalf\">\n                    {props.pageData.datasetList.map(item => (\n                        <HcLlListItemMinimal2Fields fields={item} setIndex={props.pageData.setIndex}\n                                                    parentCallback={props.parentCallback}/>))}\n\n                </div>\n                <div className=\"hcBasicSideMargin hcClrBg_Grey05 hcleftMark\">\n                    <div className=\"hcMarginTop2\">\n                        <strong>\n                            {props.pageData.detailInfoName}\n                        </strong>\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                        {props.pageData.detailInfoProvider}\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey hcMarginBottom1\">\n                        {props.pageData.detailInfodescription}\n                    </div>\n                    <div className=\"hcLabel\">Entity</div>\n                    <div className=\"hcList \">\n                        {props.pageData.detailInfoEntities.map(item => (\n                            <HcLlListItemMinimal title={item.field}/>))}\n                    </div>\n                </div>\n            </div>\n\n\n        </ React.Fragment>);\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlLayoutAlignmentOverview(props: { pageData: IAlignmentListPage, parentCallBack: ISendEvent }) {\n\n    return (\n        <React.Fragment>\n\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs}  goTo={props.parentCallBack}/>\n\n            <div className=\"hcContentContainer hcMarginBottom2\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        Alignments\n                    </div>\n                    <div className=\"hcBasicSideMargin\">\n                        <button type=\"button\" name=\"button\">\n                            New aligment\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n\n                <div className=\"hcList hcMarginBottom1 hcBasicSideMargin\">\n                    <div className=\"hcListHeader\">\n\n                        <div className=\"hcLabel hcListItemLong\">Name</div>\n                        <div className=\"hcLabel hcTxtRight\">Source</div>\n                        <div className=\"hcLabel hcTxtRight\">Targets</div>\n                        <div className=\"hcLabel hcTxtRight\">Links</div>\n                        <div className=\"hcLabel hcTxtRight\">Clusters</div>\n                        <div className=\"hcLabel\">Status</div>\n\n                        <select className=\"\" name=\"\">\n                            <option value=\"\">Order by name</option>\n                            <option value=\"\">Order by date updated</option>\n                            <option value=\"\">Order by date create</option>\n                        </select>\n\n                    </div>\n                </div>\n\n                <div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                    {/* results */}\n                    {props.pageData.alignmentList.map(item => (\n                        <HcLlListItemAlignment prName={item.prName} prSource={item.prSource}\n                                               prTarget={item.prTarget} prLinks={item.prLinks}\n                                               prCusters={item.prCusters} prStatus={item.prStatus}/>))}\n\n                </div>\n                {/* pagination */}\n                <HcResultListPaging/>\n            </div>\n\n\n        </ React.Fragment>);\n}\n\n\nexport function HcLlAlignmentDetail(props: { pageData: IAlignmentDetailPage, parentCallBack: ISendEvent }) {\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isAl={props.pageData.pageNavAl}\n                               isDs={props.pageData.pageNavDs} goTo={props.parentCallBack}/>\n            <div className=\"hcContentContainer hcMarginBottom3\">\n                <div className=\"hcRowJustify\">\n                    <div className=\"hcBasicSideMargin\">\n                        <h3><HclLIconAlignment/> Getty & Frick vs NA:: soundex 0,85</h3>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info-a\">Info</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-matching-settings\">Matching\n                            settings\n                        </div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-links\">Links</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-clusters\">Clusters</div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info-a\">\n                            <h3>Name</h3>\n                            <input type=\"text\" name=\"name\" defaultValue=\"defaultValue\" className=\"hcMarginBottom2\"/>\n                            <h3>Description</h3>\n                            <textarea name=\"name\" rows={4} className=\"hcMarginBottom1\"/>\n                            <button type=\"button\" name=\"button\">\n                                Save research\n                            </button>\n                        </div>\n\n                        {/* tab: matching-settings */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-matching-settings\">\n                            <h3>Sources</h3>\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.matchSetSrc.map(item => (<div className=\"hcRowJustify\">\n                                    <div><HclLIconDataSelection/> {item}</div>\n                                    <div className=\"hcTxtRight\"><a href=\"\">Delete</a></div>\n                                </div>))}\n                            </div>\n                            <button type=\"button\" className=\"hcMarginBottom2\">Add source</button>\n\n                            <h3>Targets</h3>\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.matchSetTrg.map(item => (<div className=\"hcRowJustify\">\n                                    <div><HclLIconDataSelection/> {item}</div>\n                                    <div className=\"hcTxtRight\"><a href=\"\">Delete</a></div>\n                                </div>))}\n                            </div>\n                            <button type=\"button\" className=\"hcMarginBottom2\">Add target</button>\n\n\n                        </div>\n\n                        {/* tab: Links */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-links\">\n                            <div className=\"hcList hcMarginBottom1\">\n                                <div className=\"hcListHeader\">\n                                    <div className=\"hcLabel\">Strenght</div>\n                                    <div className=\"hcLabel hcListItemLong\">Source</div>\n                                    <div className=\"hcLabel hcListItemLong\">Targets</div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                </div>\n                            </div>\n\n                            <div className=\"hcList hcMarginBottom1\">\n                                {props.pageData.links.map(item => (\n                                    <HcLlListItemAlignmentLinks links={item}/>))}\n                            </div>\n                        </div>\n\n                        {/* tab: Clusters */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-clusters\">\n                            <div className=\"hcList hcMarginBottom1\">\n                                <div className=\"hcListHeader\">\n                                    <div className=\"hcLabel\">Size</div>\n                                    <div className=\"hcLabel\">Links</div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                    <div className=\"hcLabel hcListItemLong\"></div>\n                                    <div className=\"hcLabel hcTxtCenter\">Extened</div>\n                                    <div className=\"hcLabel hcTxtCenter\">Reconciled</div>\n                                    <div className=\"hcLabel \">ID</div>\n                                </div>\n                            </div>\n\n                            <div className=\"hcList hcListDisctinctLines hcMarginBottom2\">\n                                {props.pageData.clusters.map(item => (\n                                    <HcLlListItemAlignmentClusters cluster={item}/>))}\n                            </div>\n\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n","import {ICondition, IFilter, IJobDataSet} from \"./apiInterfaces\";\nimport {AUTH_SERVER} from \"./config\";\n\nexport function defaultIJobDataSet() {\n    const ds: IJobDataSet = {\n        dataset: {\n            collection_id: \"\",\n            dataset_id: \"\",\n            published: false,\n            timbuctoo_graphql: AUTH_SERVER,\n            timbuctoo_hsid: \"null\"\n        },\n        id: -1,\n        label: \"\",\n        description: \"\",\n        filter: {\n            conditions: [{\n                property: []\n            }],\n            type: \"AND\"\n        },\n        limit: -1,\n        properties: [],\n        random: false,\n        related: [],\n        related_array: false\n    }\n    return ds;\n}","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutHome} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValueEvent} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {appName} from \"../../misc/config\";\n\n\nexport default function ResearchPick(props: {parentCallBack: ISendEvent, setValue:ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob, qsJobID:string | null}) {\n    const homeData =\n        {\n            \"pageTitle\": \"Home\",\n            \"projectList\": []\n        }\n        let qsID = \"\";\n        if (props.qsJobID !== null) {\n            qsID = props.qsJobID;\n        }\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName='Select research' />\n            <HcLlLayoutHome pageData={homeData} parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} qsJobID={qsID}/>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport {ISendEvent, ISetJobEvent, IDataSelectionDetailPage} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlDataSelectionDetail} from \"../page_elements/Pages\";\nimport {appName} from \"../../misc/config\";\n\nexport function DataSetDetail(props: {parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, dsIndex: number}) {\n    const pd: IDataSelectionDetailPage = {\n        \"pageTitle\": props.jobData.entity_type_selections[props.dsIndex].label,\n        \"description\": props.jobData.entity_type_selections[props.dsIndex].description,\n        \"dataset\": props.jobData.entity_type_selections[props.dsIndex].dataset.dataset_id,\n        \"collection\": props.jobData.entity_type_selections[props.dsIndex].dataset.collection_id,\n        \"pageNavDs\": true,\n        \"pageNavAl\": false,\n        \"filters\": [\n            {\n                \"filterNr\":1,\n                \"filterSetting\": \"OR\",\n                \"filterRows\": [\n                    {\"entities\": [\"pnv_hasName\",\"pnv_PersonName\",\"ns1_ontology_isInRecordList\",\"ns1_ontology_Boedelinventaris\",\"rdf_type\"]}\n                ],\n                \"condition\":\"Has value\"\n            },\n            {\n                \"filterNr\":2,\n                \"filterSetting\": \"OR\",\n                \"filterRows\": [\n                    {\"entities\": [\"pnv_hasName\",\"pnv_PersonName\",\"ns1_ontology_isInRecordList\",\"ns1_ontology_Boedelinventaris\",\"rdf_type\"]}\n                ],\n                \"condition\":\"Has value\"\n            }\n        ]\n    };\n\n\n    return (\n        <div className=\"App\">\n        <HcHeaderGoldenAgents toolName={appName} projectName={props.jobData.job_title} />\n    <HcLlDataSelectionDetail pageData={pd} parentCallBack={props.parentCallBack} jobData={props.jobData} setJob={props.setJob} dsIndex={props.dsIndex}/>\n        </div>\n    );\n}","import { StateValue, EventObject, Interpreter, State } from 'xstate';\nimport React, { useEffect, useState, ReactElement } from 'react';\nimport { StateListener } from 'xstate/lib/interpreter';\n\n\ninterface StateDefinition<TContext, Events extends EventObject> {\n  [K: string]: React.FunctionComponent<{state: State<TContext, Events>}> | StateDefinition<TContext, Events>\n}\n\ntype AsStateDefinition<T, TContext, TEvents extends EventObject> = T extends {type: \"parallel\", states: infer Sub} \n  ? ({\n    [K in Exclude<keyof Sub, \"History\">]: AsStateDefinition<Sub[K], TContext, TEvents>\n  } & {\":merge\": React.FunctionComponent<{state: State<TContext, TEvents>, input: {[K in keyof Sub]: React.FunctionComponent<{state: State<TContext, TEvents>}>}}>})\n  : T extends {states: infer Sub}\n    ? React.FunctionComponent<{state: State<TContext, TEvents>}> | {\n      [K in Exclude<keyof Sub, \"History\">]: AsStateDefinition<Sub[K], TContext, TEvents>\n    } | ({\"\": React.FunctionComponent<{state: State<TContext, TEvents>}>} & {\n      [K in Exclude<keyof Sub, \"History\">]?: AsStateDefinition<Sub[K], TContext, TEvents>\n    })\n    : React.FunctionComponent<{state: State<TContext, TEvents>}>\n\nexport function StateMachineComponent<TContext, Schema, Events extends EventObject>(interpreter: Interpreter<TContext, Schema, Events>, screens: AsStateDefinition<Schema, TContext, Events>): ReactElement {\n\n  return React.createElement(function ThisIsAFunctionComponentNoteTheCapitalFirstLetterYo() {\n    const [curState, setState] = useState(interpreter.state);\n    useEffect(() => {\n      const cb: StateListener<TContext, Events> = state => {\n        return setState(state);\n      }\n      interpreter.onTransition(cb);\n      return () => {\n        interpreter.off(cb)\n      }\n    }, [interpreter, screens])\n    const view = pickReactComponents(curState.value, screens as any)\n    if (view !== undefined) {\n      const props: any = {state: curState}\n      return React.createElement(view, props)\n    } else {\n      return <div>No GUI defined for {JSON.stringify(curState.value)}</div>\n    }\n  })\n}\n\nfunction isFunctionComponent<TContext, Events extends EventObject>(val: StateDefinition<TContext, Events> | React.FunctionComponent<{state: State<TContext, Events>}>): val is React.FunctionComponent<{state: State<TContext, Events>}> {\n  return typeof val === \"function\"\n}\n\nfunction getFirstReactComponent<TContext, Events extends EventObject>(val: StateDefinition<TContext, Events>): React.FunctionComponent<{state: State<TContext, Events>}> | undefined {\n  for (const key in val) {\n    const item = val[key]\n    if (isFunctionComponent(item)) {\n      return item\n    } else {\n      return getFirstReactComponent(item)\n    }\n  }\n  return undefined\n}\n\nfunction pickReactComponents<TContext, Events extends EventObject>(state: StateValue, config: StateDefinition<TContext, Events>): React.FunctionComponent<{state: State<TContext, Events>}> | undefined {\n  if (typeof state === \"string\") {\n    const configVal = config[state]\n    if (configVal === undefined) {\n      return (config[state] === undefined ? config[\"\"] : config[state]) as React.FunctionComponent | undefined\n    }\n    else if (isFunctionComponent(configVal)) {\n      return configVal\n    } else {\n      console.error(\"Non-terminal state config for an atomic state!\")\n      return getFirstReactComponent(configVal)\n    }\n  } else {\n    const result: {[key: string]: React.FunctionComponent<{state: State<TContext, Events>}>} = {}\n    let singleResult;\n    let count = 0\n    for (const key in state) {\n      const configVal = config[key]=== undefined ? config[\"\"] : config[key]\n      if (isFunctionComponent(configVal)) {\n        count++\n        result[key] = configVal\n        singleResult = configVal\n      } else if (typeof configVal === \"object\") {\n        const subResult = pickReactComponents(state[key], configVal)\n        if (subResult !== undefined) {\n          count++\n          result[key] = subResult\n          singleResult = subResult\n        }\n      }\n    }\n    if (count === 1) {\n      return singleResult\n    } else {\n      const merger = config[\":merge\"] as any\n      return (props: any) => merger({state: props.state, input: result})\n    }\n  }\n}\n","import {assign, Machine} from \"xstate\";\nimport { IJob, ILensSpecs, ILinkSetSpecs} from \"../misc/apiInterfaces\";\nimport {ISetBufferIndex, ISetJob, ISetValue, ISetValueEvent} from \"../misc/interfaces\";\n\nexport const lenseMachine = Machine<{\n    jobData: IJob,\n    jobID: string,\n    bufferedIndex: number\n}, {\n    states: {\n        idle: {},\n        research: {},\n        create: {},\n        fetch: {},\n        entity: {},\n        datasets: {},\n        dataset_detail: {},\n        alignments: {}\n    }\n}>({\n    id: \"lenticularLens\",\n    initial: \"research\",\n    context: {\n        jobData: {\n            created_at: \"\",\n            entity_type_selections: [],\n            job_description: \"\",\n            job_id: \"\",\n            job_link: \"\",\n            job_title: \"\",\n            lens_specs: [],\n            linkset_specs: [],\n            updated_at: \"\"\n        },\n        jobID: \"\",\n        bufferedIndex: 0\n    },\n    on: {\n        research: \"research\",\n        entity: \"entity\",\n        create: \"create\",\n        fetch: \"fetch\",\n        datasets: \"datasets\",\n        dataset_detail: \"dataset_detail\",\n        alignments: \"alignments\"\n    },\n    states: {\n        idle: {},\n        research: {\n            on: {\n                NEW: \"create\",\n                ENTITY: \"entity\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value})\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        create: {\n            on: {\n                ENTITY: \"entity\",\n                RESEARCH: \"research\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value}),\n                    target: \"fetch\"\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        fetch: {\n            on: {\n                ENTITY: \"entity\",\n                FETCH: \"fetch\",\n                RESEARCH: \"research\",\n                SET_ID: {\n                    actions: assign({jobID: (context, event: ISetValue) => event.value}),\n                    target: \"fetch\"\n                },\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        entity: {\n            on: {\n                DATASETS: \"datasets\",\n                DATASET_DETAIL: \"dataset_detail\",\n                ALIGNMENTS: \"alignments\",\n                FETCH: \"fetch\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                },\n                SET_INDEX: {\n                    actions: assign({bufferedIndex: (context, event: ISetBufferIndex) => event.value})\n                }\n            }\n        },\n        datasets: {\n            on: {\n                DATASET_DETAIL: \"dataset_detail\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                },\n                SET_INDEX: {\n                    actions: assign({bufferedIndex: (context, event: ISetBufferIndex) => event.value})\n                }\n            }\n        },\n        dataset_detail: {\n            on: {\n                ENTITY: \"entity\",\n                ALIGNMENTS: \"alignments\",\n                DATASETS: \"datasets\",\n                FETCH: \"fetch\",\n                SET_JOB: {\n                    actions: assign({jobData: (context, event: ISetJob) => event.value})\n                }\n            }\n        },\n        alignments: {\n            on: {\n                ENTITY: \"entity\",\n                FETCH: \"fetch\"\n            }\n        }\n    }\n})","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutProjectDetail} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValueEvent} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {appName} from \"../../misc/config\";\n\nexport function NewProject(props: {parentCallBack: ISendEvent, setValue:ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob}) {\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName='New research' />\n            <HcLlLayoutProjectDetail parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} jobData={props.jobData}/>\n        </div>\n    )\n}","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutProjectDetail} from \"../page_elements/Pages\";\nimport {ISendEvent, ISetJobEvent, ISetValue, ISetJob, ISetValueEvent} from \"../../misc/interfaces\";\nimport {useState, useEffect} from \"react\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {API_LOCATION, appName} from \"../../misc/config\";\n\nexport function EditProjectBasics(props: { parentCallBack: ISendEvent, setValue: ISetValueEvent, setJob:ISetJobEvent, jobID:string, jobData:IJob}) {\n    const [loading, setLoading] = useState(true);\n    const [job, setJob] = useState<IJob>(props.jobData);\n\n    async function getProject() {\n        const url = API_LOCATION + \"/job/\" + props.jobID;\n        const response = await fetch(url);\n        const json: IJob = await response.json();\n        const struc: ISetJob = {type: \"SET_JOB\", value: json};\n        props.setJob(struc);\n        setJob(json);\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        getProject();\n    }, [loading]);\n\n    return (\n        <div className=\"App\">\n            {loading ? (\n                <HcHeaderGoldenAgents toolName={appName}\n                                      projectName='Loading...'/>\n            ) : (\n                <div>\n                <HcHeaderGoldenAgents toolName={appName} projectName={job.job_title}/>\n                <HcLlLayoutProjectDetail parentCallBack={props.parentCallBack} setValue={props.setValue} setJob={props.setJob} jobID={props.jobID} jobData={props.jobData}/>\n                </div>\n                )}\n        </div>)\n}","import React from 'react';\nimport {HcLlListItemMinimal, HcLlListItemMinimal2Fields, HcLlListLabel, HcLlListItemDataSelection, HcLlListItemAlignment, HcResultListPaging,HcLlListItemAlignmentLinks, HcLlListItemAlignmentClusters,HcLlListItemAlignmentClusterViewItem} from './ListItems';\nimport {HcLlSubNavigation, HcLlCompareItem, HcLlAlignmantInfoBar} from './Utils';\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    AlignmentLinkComparePage,\n    IAlignmentDetailPage,\n    IAlignmentListPage,\n    IClusterViewPage, ISendEvent\n} from \"../../misc/interfaces\";\nconst tempImg = require(\"../../images/ga-ll-tempNetwork.svg\");\n\n\nexport function HcLlLayoutAlignmentOverview(props: {pageData: IAlignmentListPage, goTo: ISendEvent}) {\n\n        return (\n            <React.Fragment>\n\n                <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs} isAl={props.pageData.pageNavAl}  goTo={props.goTo}/>\n\n                <div className=\"hcContentContainer hcMarginBottom2\">\n                    <div className=\"hcRowJustify\">\n                        <div className=\"hcBasicSideMargin\">\n                            {props.pageData.introductionText}\n                        </div>\n                        <div className=\"hcBasicSideMargin\">\n                            <button type=\"button\" name=\"button\">\n                                New aligment\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"hcContentContainer hcMarginBottom5\">\n\n                    <div className=\"hcList hcMarginBottom1 hcBasicSideMargin\">\n                        <div className=\"hcListHeader\">\n\n                            <div className=\"hcLabel hcListItemLong\">Name</div>\n                            <div className=\"hcLabel hcTxtRight\">Source</div>\n                            <div className=\"hcLabel hcTxtRight\">Targets</div>\n                            <div className=\"hcLabel hcTxtRight\">Links</div>\n                            <div className=\"hcLabel hcTxtRight\">Clusters</div>\n                            <div className=\"hcLabel\">Status</div>\n\n                            <select className=\"\" name=\"\">\n                                <option value=\"\">Order by name</option>\n                                <option value=\"\">Order by date updated</option>\n                                <option value=\"\">Order by date create</option>\n                            </select>\n\n                        </div>\n                    </div>\n\n                    <div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                        {/* results */}\n                        {props.pageData.alignmentList.map(item => (<HcLlListItemAlignment prName={item.prName} prSource={item.prSource} prTarget={item.prTarget}  prLinks={item.prLinks} prCusters={item.prCusters} prStatus={item.prStatus} />))}\n\n                    </div>\n                    {/* pagination */}\n                    <HcResultListPaging/>\n                </div>\n\n\n            </ React.Fragment>);\n\n}\n\n\n\n\n\n\nexport function HcLlAlignmentDetail(props: {pageData: IAlignmentDetailPage, parentCallBack: ISendEvent}) {\n\n        return (<React.Fragment>\n                <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs} isAl={props.pageData.pageNavAl}  goTo={props.parentCallBack}/>\n\n                <HcLlAlignmantInfoBar\n                    infoSources={props.pageData.infoSources}  infoTargets={props.pageData.infoTargets} infoLinks={props.pageData.infoLinks} infoClusters={props.pageData.infoClusters}\n                />\n\n                <div className=\"hcContentContainer hcMarginBottom5\">\n                    <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                        <div className=\"hcTabLabels\">\n                            <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info-a\">Info</div>\n                            <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-matching-settings\">Matching settings</div>\n                            <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-links\">Links</div>\n                            <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-clusters\">Clusters</div>\n                        </div>\n                        <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                            {/* tab: info */}\n                            <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info-a\">\n                                <h3>Name</h3>\n                                <input type=\"text\" name=\"name\" defaultValue=\"defaultValue\" className=\"hcMarginBottom2\"/>\n                                <h3>Description</h3>\n                                <textarea name=\"name\" rows={4} className=\"hcMarginBottom1\"/>\n                                <button type=\"button\" name=\"button\">\n                                    Save research\n                                </button>\n                            </div>\n\n                            {/* tab: matching-settings */}\n                            <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-matching-settings\">\n                                <h3>Sources</h3>\n                                <div className=\"hcList hcMarginBottom1\">\n                                    {props.pageData.matchSetSrc.map(item => (<div className=\"hcRowJustify\"> <div><HclLIconDataSelection/> {item}</div><div className=\"hcTxtRight\"><a href=\"\">Delete</a></div> </div>))}\n                                </div>\n                                <button type=\"button\" className=\"hcMarginBottom2\" >Add source</button>\n\n                                <h3>Targets</h3>\n                                <div className=\"hcList hcMarginBottom1\">\n                                    {props.pageData.matchSetTrg.map(item => (<div className=\"hcRowJustify\"> <div><HclLIconDataSelection/> {item}</div><div className=\"hcTxtRight\"><a href=\"\">Delete</a></div> </div>))}\n                                </div>\n                                <button type=\"button\" className=\"hcMarginBottom2\">Add target</button>\n\n\n                            </div>\n\n                            {/* tab: Links */}\n                            <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-links\">\n                                <div className=\"hcList hcMarginBottom1\">\n                                    <div className=\"hcListHeader\">\n                                        <div className=\"hcLabel\">Strenght</div>\n                                        <div className=\"hcLabel hcListItemLong\">Source</div>\n                                        <div className=\"hcLabel hcListItemLong\">Targets</div>\n                                        <div className=\"hcLabel hcListItemLong\"></div>\n                                    </div>\n                                </div>\n\n                                <div className=\"hcList hcMarginBottom1\">\n                                    {props.pageData.links.map(item => (<HcLlListItemAlignmentLinks links={item} />))}\n                                </div>\n                            </div>\n\n                            {/* tab: Clusters */}\n                            <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-clusters\">\n                                <div className=\"hcList hcMarginBottom1\">\n                                    <div className=\"hcListHeader\">\n                                        <div className=\"hcLabel\">Size</div>\n                                        <div className=\"hcLabel\">Links</div>\n                                        <div className=\"hcLabel hcListItemLong\" ></div>\n                                        <div className=\"hcLabel hcListItemLong\" ></div>\n                                        <div className=\"hcLabel hcTxtCenter\">Extened</div>\n                                        <div className=\"hcLabel hcTxtCenter\">Reconciled</div>\n                                        <div className=\"hcLabel \">ID</div>\n                                    </div>\n                                </div>\n\n                                <div className=\"hcList hcListDisctinctLines hcMarginBottom2\" >\n                                    {props.pageData.clusters.map(item => (<HcLlListItemAlignmentClusters cluster={item} />))}\n                                </div>\n\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ React.Fragment>\n        );\n}\n\n\nexport function HcLlAlignmentsLinkCompare(props: {pageData: AlignmentLinkComparePage}) {\n\n        return (\n            <React.Fragment>\n\n                <div className=\"hcContentContainer hcMarginBottom1 hcMarginTop1\">\n                    <div className=\"hcBasicSideMargin hcAlignRight\">\n                        <a href=\"\"><button>View settings</button></a>\n                        <a href=\"\">Close</a>\n                    </div>\n                </div>\n\n                <div className=\"hcContentContainer hcMarginBottom5\">\n                    <div className=\"hcLayoutCols122 hcVerticalLineSeperator\">\n                        <div className=\"hcBasicSideMargin\">\n                            <h3>Link</h3>\n                            <div className=\"hcLabel\">nr</div>\n                            <div className=\"hcMarginBottom1\">{props.pageData.nr}</div>\n                            <div className=\"hcLabel\">Strength</div>\n                            <div>{props.pageData.strength}</div>\n                        </div>\n\n                        <div className=\"hcBasicSideMargin\">\n                            <h3>Source</h3>\n                            <div className=\"hcMarginBottom1 hcSmallTxt\"><a href={props.pageData.sUri}>{props.pageData.sUri}</a></div>\n                            {props.pageData.sourceItems.map(item => (<HcLlCompareItem label={item.label} content={item.content} />))}\n                        </div>\n                        <div className=\"hcBasicSideMargin\">\n                            <h3>Target</h3>\n                            <div className=\"hcMarginBottom1 hcSmallTxt\"><a href={props.pageData.tUri}>{props.pageData.tUri}</a></div>\n                            {props.pageData.targetItems.map(item => (<HcLlCompareItem label={item.label} content={item.content} />))}\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"hcStickyFooter hcStickyFooterLook hcContentContainer\">\n                    <div className=\"hc3columns hcBasicSideMargin\">\n\n                        <div className=\"hcTxtLeft\"><button>Previous</button></div>\n                        <div className=\"hcTxtCenter\"><button className=\"bgColorBrand2\">Accept</button><button className=\"hcClrBg_Error\">Decline</button></div>\n                        <div className=\"hcTxtRight\"><button>Next</button></div>\n                    </div>\n                </div>\n            </ React.Fragment>\n\n        );\n}\n\n\n\nexport function HcLlAlignmentsClusterView(props: {pageData: IClusterViewPage}) {\n\n        return (\n            <React.Fragment>\n                <div className=\"hcContentContainer hcMarginBottom1 hcMarginTop1\">\n                    <div className=\"hcBasicSideMargin hcAlignRight\">\n                        <a href=\"\"><button>View settings</button></a>\n                        <a href=\"\">Close</a>\n                    </div>\n                </div>\n\n\n                <div className=\"hcLayoutCols112\">\n                    <div className=\"hcBasicSideMargin\">\n                        <div className=\"hcLabel\">Source</div>\n                        <div className=\"hcList hcListDisctinctLines\">\n                            {props.pageData.targetList.map(item => (<HcLlListItemAlignmentClusterViewItem field1={item.field1} field2={item.field2} field3={item.field3} />))}\n                        </div>\n                    </div>\n\n\n\n\n                    <div className=\"hcBasicSideMargin\">\n                        <div className=\"hcBasicSideMargin\">\n                            <div className=\"hcLabel\">Target</div>\n                            <div className=\"hcList hcListDisctinctLines\">\n                                {props.pageData.sourceList.map(item => (<HcLlListItemAlignmentClusterViewItem field1={item.field1} field2={item.field2} field3={item.field3} />))}\n                            </div>\n                        </div>\n                    </div>\n\n\n\n                    <div className=\"hcBasicSideMargin\">\n                        <img src={tempImg} className=\"tempImg\" />\n                    </div>\n\n                </div>\n\n            </ React.Fragment>\n\n        );\n}\n","import React from 'react';\nimport {IAlignmentListPage, ISendEvent} from \"../../misc/interfaces\";\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutAlignmentOverview} from \"../page_elements/PagesAlignments\";\nimport {IJob} from \"../../misc/apiInterfaces\";\n\nexport default function Alignments(props: { goTo: ISendEvent, jobData: IJob }) {\n    const pd: IAlignmentListPage = {\n        \"pageTitle\": \"\",\n        \"pageNavDs\": false,\n        \"pageNavAl\": true,\n        \"introductionText\": \"The data selection contains the selections of datasets you will work with. They can be entities with filters on them.\",\n        \"alignmentList\": [\n            {\n                \"prName\": \"Getty & Frick vs NA:: approx Lev 0,7\",\n                \"prSource\": \"7634\",\n                \"prTarget\": \"232.113\",\n                \"prLinks\": \"345\",\n                \"prCusters\": \"33\",\n                \"prStatus\": \"Matched-Clustered\"\n            },\n            {\n                \"prName\": \"Getty & Frick vs NA:: soundex 0,85\",\n                \"prSource\": \"2344\",\n                \"prTarget\": \"32.233\",\n                \"prLinks\": \"156\",\n                \"prCusters\": \"11\",\n                \"prStatus\": \"Matched-Clustered\"\n            },\n            {\n                \"prName\": \"Getty vs Frick:: Lev 7\",\n                \"prSource\": \"7634\",\n                \"prTarget\": \"32.233\",\n                \"prLinks\": \"345\",\n                \"prCusters\": \"\",\n                \"prStatus\": \"Matched\"\n            },\n            {\n                \"prName\": \"Getty vs Frick:: soundex 0,85::\",\n                \"prSource\": \"7634\",\n                \"prTarget\": \"232.113\",\n                \"prLinks\": \"145\",\n                \"prCusters\": \"15\",\n                \"prStatus\": \"Matched-Clustered\"\n            },\n            {\n                \"prName\": \"Getty vs NA:: Lev 7\",\n                \"prSource\": \"2455\",\n                \"prTarget\": \"232.113\",\n                \"prLinks\": \"145\",\n                \"prCusters\": \"\",\n                \"prStatus\": \"Matched\"\n            },\n            {\n                \"prName\": \"Getty vs NA:: approx Lev 0,7\",\n                \"prSource\": \"3765\",\n                \"prTarget\": \"756\",\n                \"prLinks\": \"145\",\n                \"prCusters\": \"125\",\n                \"prStatus\": \"Matched-Clustered\"\n            }\n        ]\n    }\n\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName='Lenticular Lenses' projectName={props.jobData.job_title}/>\n            <HcLlLayoutAlignmentOverview pageData={pd} goTo={props.goTo}/>\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcLlLayoutDataSelectionOverview} from \"../page_elements/Pages\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {\n    ICreateList,\n    IDataSelectionListPage,\n    IDsList,\n    ISendEvent,\n    ISetBufferIndexEvent,\n    ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {appName} from \"../../misc/config\";\n\nexport function EntitySelection(props: { parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, setBufferIndex: ISetBufferIndexEvent }) {\n    const pd: IDataSelectionListPage = {\n        pageTitle: \"Data selection - list\",\n        pageNavDs: true,\n        pageNavAl: false,\n        introductionText: \"The data selection contains the selections of datasets you will work with. They can be entities with filters on them.\",\n        dsList: createList(props.jobData)\n    }\n\n    function createList(jd: IJob): IDsList[] {\n        let retList: IDsList[] = [];\n        if (jd.entity_type_selections !== null) {\n            jd.entity_type_selections.map((item, index) => {\n                const buffer: IDsList = {\n                    dsName: item.label,\n                    dsDataset: item.description,\n                    dsProvider: \"\",\n                    dsIndex: index\n                }\n                retList.push(buffer);\n            });\n        }\n        return retList;\n    }\n\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName} projectName={props.jobData.job_title}/>\n            <HcLlLayoutDataSelectionOverview parentCallBack={props.parentCallBack} pageData={pd} jobData={props.jobData}\n                                             setJob={props.setJob} setBufferIndex={props.setBufferIndex}/>\n        </div>\n    );\n}","import React from 'react';\nimport {\n    HcLlListItemMinimal,\n    HcLlListItemMinimal2Fields,\n    HcLlListLabel,\n    HcLlSelectEntityFromList,\n    HcLlListItemDataSelection,\n    HcLlListItemAlignment,\n    HcResultListPaging,\n    HcLlListItemAlignmentLinks,\n    HcLlListItemAlignmentClusters\n} from './ListItems';\nimport {HcLlSubNavigation} from './Utils';\nimport {HclLIconDataSelection, HclLIconAlignment} from './GoldenAgents';\nimport {\n    IDataSelectionDetailPage,\n    IDataSelectionListPage,\n    IModalSelectDatasetPage, ISendEvent,\n    ISetIndex, ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {IJob} from \"../../misc/apiInterfaces\";\n\n\nexport function HcLlLayoutDataSelectionOverview(props: {pageData: IDataSelectionListPage, parentCallBack: ISendEvent}) {\n\n    return (<React.Fragment>\n        <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs}\n                           isAl={props.pageData.pageNavAl}  goTo={props.parentCallBack}/>\n\n        <div className=\"hcContentContainer hcMarginBottom2\">\n            <div className=\"hcRowJustify\">\n                <div className=\"hcBasicSideMargin\">\n                    {props.pageData.introductionText}\n                </div>\n                <div className=\"hcBasicSideMargin\">\n                    <button type=\"button\" name=\"button\">\n                        New data selection\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"hcContentContainer hcMarginBottom5\">\n            <div className=\"hcResultsHeader hcMarginBottom1 hcBasicSideMargin\">\n                <div>\n                    {/* labels */}\n                    <HcLlListLabel title=\"Data selections\"/>\n                </div>\n\n                <div>\n                    <select className=\"\" name=\"\">\n                        <option value=\"\">Order by name</option>\n                        <option value=\"\">Order by date updated</option>\n                        <option value=\"\">Order by date create</option>\n                    </select>\n                </div>\n            </div>\n\n            {/*<div className=\"hcList hcListDisctinctLines hcBasicSideMargin hcMarginBottom2\">\n                 results\n                {props.pageData.dsList.map(item => (\n                    <HcLlListItemDataSelection idsList={item}/>))}\n\n            </div>*/}\n            {/* pagination */}\n            <HcResultListPaging/>\n        </div>\n    </ React.Fragment>);\n}\n\n\nexport function HcLlDataSelectionDetail(props: {pageData: IDataSelectionDetailPage, parentCallBack: ISendEvent}) {\n\n    return (<React.Fragment>\n            <HcLlSubNavigation pageTitle={props.pageData.pageTitle} isDs={props.pageData.pageNavDs}\n                               isAl={props.pageData.pageNavAl}  goTo={props.parentCallBack}/>\n\n\n            <div className=\"hcContentContainer hcMarginBottom5\">\n                <div className=\"hcTabs hcTabsHoriz hcBasicSideMargin\">\n                    <div className=\"hcTabLabels\">\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-info\">Info</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-dataset\">Dataset</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-filter\">Filter</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-sample\">Sample</div>\n                        <div className=\"hcTabLabel hcRoundedCornersTop\" id=\"tab-list-relation\">Relation</div>\n                    </div>\n                    <div className=\"hcTabAllContent hcStickOutBoxAside hcRoundedCornersTop\">\n\n                        {/* tab: info */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-info\">\n                            <h3>Name</h3>\n                            <input type=\"text\" name=\"name\" defaultValue=\"defaultValue\" className=\"hcMarginBottom2\"/>\n                            <h3>Description</h3>\n                            <textarea name=\"name\" rows={4} className=\"hcMarginBottom1\"/>\n                            <button type=\"button\" name=\"button\">\n                                Save research\n                            </button>\n                        </div>\n\n                        {/* tab: Dataset and entity */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-dataset\">\n                            <h3>Dataset and entity</h3>\n                            <div>\n                                <div className=\"hc2columns hcMarginBottom2\">\n                                    <div>\n                                        <div className=\"hcLabel\">dataset</div>\n                                        Enriched version of the Index op ondertrouwregisters\n                                        <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                                            Enriched version of the Index op ondertrouwregisters. Enrichment by Golden\n                                            Agents.\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <div className=\"hcLabel\">entity</div>\n                                        saa_Person\n                                    </div>\n                                </div>\n                                <button type=\"button\" name=\"button\">\n                                    Select data\n                                </button>\n                            </div>\n\n                        </div>\n\n                        {/* tab: Filter */}\n                        <div className=\"hcTabContent hcMarginTop2 hcForm\" id=\"tab-content-filter\">\n                            <h3>Filter</h3>\n\n\n                        </div>\n\n                        {/* tab: Sample */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-sample\">\n                            <h3>Sample</h3>\n                            <div className=\"hc2columns\">\n                                <div>Only use a sample of this amount of records (-1 is no limit)</div>\n                                <div><input type=\"number\" value=\"-1\"/></div>\n                            </div>\n                        </div>\n\n                        {/* tab: Relation */}\n                        <div className=\"hcTabContent hcMarginTop2\" id=\"tab-content-relation\">\n                            <h3>Relation</h3>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </ React.Fragment>\n    );\n}\n\n\n{/* Modal select dataset */\n}\n\nexport function HcLlSelectDataset(props: {pageData: IModalSelectDatasetPage, parentCallback: ISetIndex, jobData: IJob, switchState:ISendEvent, setJob: ISetJobEvent, dsIndex: number}) {\n\n    return (\n        <React.Fragment>\n            <div className=\" hc2columns\">\n                <div className=\"hcList hcMarginBottom4 hcBasicSideMargin hcMaxhalf\">\n                    {props.pageData.datasetList.map(item => (\n                        <HcLlListItemMinimal2Fields fields={item} setIndex={props.pageData.setIndex} parentCallback= {props.parentCallback} />))}\n\n                </div>\n                <div className=\"hcBasicSideMargin hcClrBg_Grey05 hcleftMark\">\n                    <div className=\"hcMarginTop2\">\n                        <strong>\n                            {props.pageData.detailInfoName}\n                        </strong>\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey\">\n                        {props.pageData.detailInfoProvider}\n                    </div>\n                    <div className=\"hcSmallTxt hcClrTxt_Grey hcMarginBottom1\">\n                        {props.pageData.detailInfodescription}\n                    </div>\n                    <div className=\"hcLabel\">Entity</div>\n                    <div className=\"hcList \">\n                        {props.pageData.detailInfoEntities.map(item => (\n                            <HcLlSelectEntityFromList title={item.field} setIndex={props.pageData.setIndex} jobData={props.jobData} switchState={props.switchState} setJob={props.setJob} dsIndex={props.dsIndex}/>))}\n                    </div>\n                </div>\n            </div>\n\n\n        </ React.Fragment>);\n}\n","import React from 'react';\nimport {assign, Machine} from \"xstate\";\nimport {useState, useEffect} from \"react\";\nimport {IJob} from \"../../misc/apiInterfaces\";\nimport {HcHeaderGoldenAgents} from \"../page_elements/GoldenAgents\";\nimport {HcModal} from \"../page_elements/Utils\"\nimport {HcLlDataSelectionDetail} from \"../page_elements/PagesDataSelection\";\nimport {HcLlSelectDataset} from \"../page_elements/PagesDataSelection\";\nimport {\n    ISendEvent,\n    IModalSelectDatasetPage,\n    ISingleList,\n    IDoubleList,\n    IDataSet,\n    IDataSets,\n    ISetIndex, ISetJobEvent\n} from \"../../misc/interfaces\";\nimport {API_LOCATION, appName, GOLDEN_AGENTS_REPOSITORY} from \"../../misc/config\";\n\nexport function PickDataSets(props: { parentCallBack: ISendEvent, jobData: IJob, setJob: ISetJobEvent, dsIndex: number, hsid: string | null }) {\n    const [loading, setLoading] = useState(true);\n    const [refreshToggle, setRefreshToggle] = useState(true);\n    const url = API_LOCATION + GOLDEN_AGENTS_REPOSITORY;\n    let options: any = {}\n    if (props.hsid !== null) {\n        options = {\n            headers: {\n                authorization: props.hsid\n            }\n        }\n    }\n\n    let pd: IModalSelectDatasetPage = {\n        pageTitle: \"Modal select dataset\",\n        pageNavDs: true,\n        pageNavAl: false,\n        datasetList: [],\n        detailInfoEntities: [],\n        detailInfoName: \"\",\n        detailInfoProvider: \"\",\n        detailInfodescription: \"\",\n        setIndex: \"\"\n    }\n\n    const [pageData, setPageData] = useState<IModalSelectDatasetPage>(pd);\n    const [dataSets, setDataSets] = useState<IDataSets | any>();\n\n    async function fetchDataSets() {\n        console.log(url);\n        const response = await fetch(url, options);\n        const json = await response.json();\n        const obj = Object.keys(json);\n        const g: string = obj[0].toString();\n        pd.setIndex = g;\n        pd.datasetList = setDataSetList(json);\n        pd.detailInfoEntities = setDetailInfoEntities(json, g);\n        pd.detailInfoName = json[g].title;\n        setPageData(pd);\n        setDataSets(json);\n        setLoading(false);\n    }\n\n    const setIndex: ISetIndex = (index: string) => {\n        let pd:IModalSelectDatasetPage = pageData;\n        pd.detailInfoEntities = setDetailInfoEntities(dataSets, index);\n        pd.detailInfoName = dataSets[index].title;\n        pd.setIndex = index;\n        setPageData(pd);\n        setRefreshToggle((!refreshToggle));\n    }\n\n    function setDataSetList(json: any):IDoubleList[] {\n        let retList: IDoubleList[] = [];\n        const obj = Object.keys(json);\n        obj.map((item) => {\n            const list: IDoubleList = {\n                field1: json[item].title,\n                field2: json[item].description,\n                key: item\n            };\n            retList.push(list);\n        });\n        return retList;\n    }\n\n    function setDetailInfoEntities(json: any, index: string):ISingleList[] {\n        let retList: ISingleList[] = [];\n        const obj = Object.keys(json);\n        const entities = Object.keys(json[index].collections);\n        entities.map((item) => {\n            const list: ISingleList = {\n                field: item\n            }\n            retList.push(list);\n        });\n        return retList;\n    }\n\n    useEffect(() => {\n        fetchDataSets();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <HcHeaderGoldenAgents toolName={appName}\n                                  projectName={props.jobData.job_title}/>\n            {!loading ? (<HcModal parentCallBack={props.parentCallBack} modalName='Select dataset'>\n                    <HcLlSelectDataset pageData={pageData} parentCallback={setIndex} jobData={props.jobData} switchState={props.parentCallBack} setJob={props.setJob} dsIndex={props.dsIndex}/>\n                </HcModal>) :\n                (<div className=\"loadClass\">Loading...</div>)}\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/huc-connect-sets.css';\nimport './css/huc-data-entry.css';\nimport './css/huc-search.css';\nimport './css/GoldenAgents.css';\nimport ResearchPick from \"./components/pages/ResearchPick\";\nimport {DataSetDetail} from \"./components/pages/dataSetDetail\";\nimport {StateMachineComponent} from './renderMachine';\nimport {lenseMachine} from \"./machines/LenseMachine\";\nimport {NewProject} from \"./components/pages/newProject\";\nimport {EditProjectBasics} from \"./components/pages/editProjectBasics\";\nimport Alignments from \"./components/pages/alignments\";\nimport {interpret} from \"xstate\";\nimport {\n    ISendEvent,\n    ISetBufferIndex,\n    ISetBufferIndexEvent,\n    ISetJob,\n    ISetJobEvent,\n    ISetValue,\n    ISetValueEvent\n} from \"./misc/interfaces\";\nimport * as serviceWorker from './serviceWorker';\nimport {EntitySelection} from \"./components/pages/EntitySelection\";\nimport {PickDataSets} from \"./components/pages/PickDataSets\";\n\n\nconst interpreter = interpret(lenseMachine);\ninterpreter.start();\n\nconst switchState: ISendEvent = (name: string) => {\n    interpreter.send(name);\n}\n\nconst setContextValue: ISetValueEvent = (struc:ISetValue) => {\n    interpreter.send(struc);\n}\n\nconst setContextJob: ISetJobEvent = (struc:ISetJob) => {\n    interpreter.send(struc);\n}\n\nconst setContextIndex: ISetBufferIndexEvent = (struc: ISetBufferIndex) => {\n    interpreter.send(struc);\n}\n\nconst qs: URLSearchParams = new URLSearchParams(window.location.search);\nconst qsJobID: string | null = qs.get(\"job_id\");\nconst qsHSID: string | null = qs.get(\"hsid\");\n\nReactDOM.render(\n    <div>\n        {StateMachineComponent(interpreter,\n            {\n                \"research\": ({state}) => <ResearchPick parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData} qsJobID={qsJobID}/>,\n                \"create\": ({state}) => <NewProject  parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData}/>,\n                \"fetch\": ({state}) => <EditProjectBasics parentCallBack={switchState} setValue={setContextValue} setJob={setContextJob} jobID={state.context.jobID} jobData={state.context.jobData}/>,\n                \"entity\": ({state}) => <EntitySelection parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob} setBufferIndex={setContextIndex}/>,\n                \"datasets\" : ({state}) => <PickDataSets parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob} dsIndex={state.context.bufferedIndex} hsid={qsHSID}/>,\n                \"dataset_detail\" : ({state}) => <DataSetDetail parentCallBack={switchState} jobData={state.context.jobData} setJob={setContextJob} dsIndex={state.context.bufferedIndex}/>,\n                \"alignments\" : ({state}) => <Alignments goTo={switchState} jobData={state.context.jobData}/>,\n                \"\": ({state}) => <div>The GUI for {state.value} is not yet defined</div>\n            })}\n    </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}